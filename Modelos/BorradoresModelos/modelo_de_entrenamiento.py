# -*- coding: utf-8 -*-
"""Modelo de entrenamiento.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TwCCHskaiy5BxcZve9nSg2MwvSZPlP8R

# Inicio de Modelo (SepsisLabel) (SepsisSIRS) (SepsisSOFA)

# MODELO SEPSISLABEL

# Reducción del dataset y validación de datos
"""

DatosReducidoLabel = GSepsis[['Bilirubin_total', 'Creatinine', 'HR', 'MAP', 'Platelets', 'Temp', 'WBC', 'SepsisLabel']].copy() 
DatosReducidoLabel

DatosReducidoLabel.info()

DatosReducidoLabel.describe()

datos_entrenamiento = DatosReducidoLabel.sample(frac=0.8, random_state=0)
datos_test = DatosReducidoLabel.drop(datos_entrenamiento.index)

etiquetas_entrenamiento = datos_entrenamiento.pop('SepsisLabel')
etiquetas_test = datos_test.pop('SepsisLabel')

modelo = LogisticRegression()
modelo.fit(datos_entrenamiento,etiquetas_entrenamiento)

predicciones = modelo.predict(datos_test)
predicciones

error = np.sqrt(mean_squared_error(etiquetas_test, predicciones))
print("Error porcentual : %f" % (error*100))

"""# MODELO SEPSISSIRS

# Reducción del dataset y validación de datos
"""

DatosReducidoSIRS = GSepsis[['Bilirubin_total', 'Creatinine', 'HR', 'MAP', 'Platelets', 'Temp', 'WBC', 'Sepsis_SIRS']].copy() 
DatosReducidoSIRS

DatosReducidoSIRS.info()

DatosReducidoSIRS.describe()

datos_entrenamientoSIRS = DatosReducidoSIRS.sample(frac=0.8, random_state=0)
datos_testSIRS = DatosReducidoSIRS.drop(datos_entrenamientoSIRS.index)

etiquetas_entrenamientoSIRS = datos_entrenamientoSIRS.pop('Sepsis_SIRS')
etiquetas_testSIRS = datos_testSIRS.pop('Sepsis_SIRS')

modeloSIRS = LogisticRegression()
modeloSIRS.fit(datos_entrenamientoSIRS,etiquetas_entrenamientoSIRS)

predicciones = modelo.predict(datos_testSIRS)
predicciones

error = np.sqrt(mean_squared_error(etiquetas_testSIRS, predicciones))
print("Error porcentual : %f" % (error*100))

"""# MODELO SEPSISSOFA

# Reducción del dataset y validación de datos
"""

DatosReducidoSOFA = GSepsis[['Bilirubin_total', 'Creatinine', 'HR', 'MAP', 'Platelets', 'Temp', 'WBC', 'Sepsis_SOFA']].copy() 
DatosReducidoSOFA

DatosReducidoSOFA.info()

DatosReducidoSOFA.describe()

datos_entrenamientoSOFA = DatosReducidoSOFA.sample(frac=0.8, random_state=0)
datos_testSOFA = DatosReducidoSOFA.drop(datos_entrenamientoSIRS.index)

etiquetas_entrenamientoSOFA = datos_entrenamientoSOFA.pop('Sepsis_SOFA')
etiquetas_testSOFA = datos_testSOFA.pop('Sepsis_SOFA')

modeloSOFA = LogisticRegression()
modeloSOFA.fit(datos_entrenamientoSOFA,etiquetas_entrenamientoSOFA)

predicciones = modelo.predict(datos_testSOFA)
predicciones

error = np.sqrt(mean_squared_error(etiquetas_testSOFA, predicciones))
print("Error porcentual : %f" % (error*100))