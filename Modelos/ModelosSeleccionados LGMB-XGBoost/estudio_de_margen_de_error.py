# -*- coding: utf-8 -*-
"""Estudio de margen de error.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/118KLbH4o8JkrSJoZ4YKNIlIuWg9l_YrZ

# Librerias
"""

import numpy as np
import matplotlib.pyplot as plt
import math
import seaborn as sn
import pandas as pd
from math import e
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn import linear_model
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import  accuracy_score
from sklearn.metrics import roc_auc_score
from sklearn.metrics import  roc_curve
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
from sklearn.ensemble import RandomForestClassifier
from sklearn import preprocessing
from sklearn.model_selection import StratifiedShuffleSplit
from mlxtend.plotting import plot_confusion_matrix
from sklearn.metrics import f1_score
from sklearn.metrics import f1_score, precision_score, recall_score, roc_auc_score, roc_curve
from sklearn.neural_network import MLPClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import RandomizedSearchCV
from sklearn.pipeline import Pipeline
from sklearn.model_selection import RepeatedStratifiedKFold
import joblib
import lightgbm as lgb
from sklearn.preprocessing import label_binarize

"""# LGBMG4"""

# Se carga la data seleccionada para el estudio
csv_path = '/content/PC120_220C.csv'
TrainG4 = pd.read_csv(csv_path, sep=',')

TrainG4.rename({"Unnamed: 0":"a"}, axis="columns", inplace=True)
TrainG4.drop(["a"], axis=1, inplace=True)

TrainG4.Respiracion = TrainG4.Respiracion.replace(["No valido"], -1)
TrainG4.astype({'Respiracion':'float64'}).dtypes

# Se escogen la variables en X que se van a verificar para el analisis, y en y para el atributo que queremos identificar (De la data de entrenamiento)

y = (TrainG4["SepsisLabel"])
X = (TrainG4.drop(['SepsisLabel','Respiracion'], axis=1))

#División del dataset con split entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.30, random_state=4, stratify=y)

print(u'Dimensiones en train \n-X:{}\-Y{}'.format(X_train.shape, y_train.shape))
print(u'Dimensiones en test \n-X:{}\-Y{}'.format(X_test.shape, y_test.shape))

paciente = pd.DataFrame()
ySepsis = pd.DataFrame(y_test)
paciente = X_test[['Paciente']].copy()
X_test = (X_test.drop(['Paciente'], axis=1))
X_train = (X_train.drop(['Paciente'], axis=1))

"""### LGBMC"""

gbm4=lgb.LGBMClassifier(random_state=2018)  #lgb
#gbm1.fit(X_train,y_train)

# define evaluation
cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=5, random_state=1)

# define search space
space = dict()
space['n_estimators'] = [100, 500, 1000]
space['max_depth'] = [-1, 1, 3, 5, 10, 20]
space['subsample'] = [0.5, 1]
space['learning_rate'] = [0.001, 0.01, 0.1]
space['boosting_type'] = ['gbdt']

# define search
search = GridSearchCV(gbm4, space, scoring='accuracy', n_jobs=-1, cv=cv)

# execute search
result = search.fit(X_train, y_train)
y_gbm_pred4=search.predict(X_test)

# summarize result
print('Best Score: %s' % result.best_score_)
print('Best Hyperparameters: %s' % result.best_params_)

gbm_score4 = precision_score (y_test, y_gbm_pred4) # Tasa de precisión
print('gbm_score:',gbm_score4)

gbm_auc4 = roc_auc_score (y_test, y_gbm_pred4) #gbm_auc value
print('gbm_auc:',gbm_auc4)

gbm_f14 = f1_score(y_test, y_gbm_pred4)
print(gbm_f14)

#Matriz de Confusión
cmgbm4= confusion_matrix(y_test, y_gbm_pred4)
cmgbm4

plot_confusion_matrix(conf_mat=cmgbm4,figsize=(5,5), show_normed= False, cmap='Set2')
plt.tight_layout()

y_test_probgbm4 = search.predict_proba(X_test)
fprgbm4, tprgbm4, thrsgbm4 = roc_curve(y_test, y_test_probgbm4[:,1])

#Curva AUC

plt.plot(fprgbm4,tprgbm4)
plt.plot([0,1], [0,1], "r--")
plt.title("ROC LGBMC")
plt.xlabel("Falsos Positivos")
plt.ylabel ("Verdaderos Psotivos")
plt.show()

joblib.dump(search, 'ModeloCompleto_LGBMC.pkl')

y_gbm_pred4

"""#Configuración Dataset"""

prediccion = pd.DataFrame(y_gbm_pred4)
ySepsis

paciente = paciente.reset_index()
X_test = X_test.reset_index()

for i in range(0,len(prediccion)):

  X_test.loc[i, 'Paciente'] = paciente.iloc[i]['Paciente'];
  X_test.loc[i, 'SepsisLabel'] = ySepsis.iloc[i]['SepsisLabel'];
  X_test.loc[i, 'Prediccion'] = prediccion.iloc[i][0];

X_test
X_test.to_csv('X_testCompleto.csv')

"""# Identificación de pacientes"""

# Se carga la data seleccionada para el estudio
csv_path = '/content/X_testCompleto.csv'
X_test = pd.read_csv(csv_path, sep=',')

X_test.rename({"Unnamed: 0":"a"}, axis="columns", inplace=True)
X_test.drop(["a"], axis=1, inplace=True)
X_test.drop(["index"], axis=1, inplace=True)

pa_error = pd.DataFrame()
pa_correcto = pd.DataFrame()

by_pacientes = X_test.sort_values(['Paciente','Hora'])
by_pacientes = by_pacientes.reset_index()
by_pacientes.drop(["index"], axis=1, inplace=True)
by_pacientes
by_pacientes.to_csv('TrainCompletoOrdenado.csv')

posco = 0
poserror = 0

for i in range(0,len(X_test)):

  if (X_test.loc[i,'SepsisLabel'] == X_test.loc[i,'Prediccion']):

       pa_correcto.loc[posco, 'Paciente'] = X_test.iloc[i]['Paciente'];
       pa_correcto.loc[posco, 'Hora'] = X_test.iloc[i]['Hora'];
       pa_correcto.loc[posco, 'Bilirubin_total'] = X_test.iloc[i]['Bilirubin_total'];
       pa_correcto.loc[posco, 'Creatinine'] = X_test.iloc[i]['Creatinine'];
       pa_correcto.loc[posco, 'MAP'] = X_test.iloc[i]['MAP'];
       pa_correcto.loc[posco, 'Platelets'] = X_test.iloc[i]['Platelets'];
       pa_correcto.loc[posco, 'HR'] = X_test.iloc[i]['HR'];
       pa_correcto.loc[posco, 'SepsisLabel'] = X_test.iloc[i]['SepsisLabel'];
       pa_correcto.loc[posco, 'Prediccion'] = X_test.iloc[i]['Prediccion'];
       pa_correcto.loc[posco, 'AST'] = X_test.iloc[i]['AST'];
       pa_correcto.loc[posco, 'Age'] = X_test.iloc[i]['Age'];
       pa_correcto.loc[posco, 'Alkalinephos'] = X_test.iloc[i]['Alkalinephos'];
       pa_correcto.loc[posco, 'BUN'] = X_test.iloc[i]['BUN'];
       pa_correcto.loc[posco, 'BaseExcess'] = X_test.iloc[i]['BaseExcess'];
       pa_correcto.loc[posco, 'Bilirubin_direct'] = X_test.iloc[i]['Bilirubin_direct'];
       pa_correcto.loc[posco, 'Calcium'] = X_test.iloc[i]['Calcium'];
       pa_correcto.loc[posco, 'Chloride'] = X_test.iloc[i]['Chloride'];
       pa_correcto.loc[posco, 'DBP'] = X_test.iloc[i]['DBP'];
       pa_correcto.loc[posco, 'EtCO2'] = X_test.iloc[i]['EtCO2'];
       pa_correcto.loc[posco, 'FiO2'] = X_test.iloc[i]['FiO2'];
       pa_correcto.loc[posco, 'Fibrinogen'] = X_test.iloc[i]['Fibrinogen'];
       pa_correcto.loc[posco, 'Gender'] = X_test.iloc[i]['Gender'];
       pa_correcto.loc[posco, 'Glucose'] = X_test.iloc[i]['Glucose'];
       pa_correcto.loc[posco, 'HCO3'] = X_test.iloc[i]['HCO3'];
       pa_correcto.loc[posco, 'Hct'] = X_test.iloc[i]['Hct'];
       pa_correcto.loc[posco, 'Hgb'] = X_test.iloc[i]['Hgb'];
       pa_correcto.loc[posco, 'HospAdmTime'] = X_test.iloc[i]['HospAdmTime'];
       pa_correcto.loc[posco, 'ICULOS'] = X_test.iloc[i]['ICULOS'];
       pa_correcto.loc[posco, 'Lactate'] = X_test.iloc[i]['Lactate'];
       pa_correcto.loc[posco, 'Magnesium'] = X_test.iloc[i]['Magnesium'];
       pa_correcto.loc[posco, 'O2Sat'] = X_test.iloc[i]['O2Sat'];
       pa_correcto.loc[posco, 'PTT'] = X_test.iloc[i]['PTT'];
       pa_correcto.loc[posco, 'PaCO2'] = X_test.iloc[i]['PaCO2'];
       pa_correcto.loc[posco, 'Phosphate'] = X_test.iloc[i]['Phosphate'];
       pa_correcto.loc[posco, 'Potassium'] = X_test.iloc[i]['Potassium'];
       pa_correcto.loc[posco, 'Resp'] = X_test.iloc[i]['Resp'];
       pa_correcto.loc[posco, 'SBP'] = X_test.iloc[i]['SBP'];
       pa_correcto.loc[posco, 'SaO2'] = X_test.iloc[i]['SaO2'];
       pa_correcto.loc[posco, 'Temp'] = X_test.iloc[i]['Temp'];
       pa_correcto.loc[posco, 'TroponinI'] = X_test.iloc[i]['TroponinI'];
       pa_correcto.loc[posco, 'Unit1'] = X_test.iloc[i]['Unit1'];
       pa_correcto.loc[posco, 'Unit2'] = X_test.iloc[i]['Unit2'];
       pa_correcto.loc[posco, 'WBC'] = X_test.iloc[i]['WBC'];
       pa_correcto.loc[posco, 'pH'] = X_test.iloc[i]['pH'];
       pa_correcto.loc[posco, 'Sepsis_SIRS'] = X_test.iloc[i]['Sepsis_SIRS'];
       pa_correcto.loc[posco, 'Sepsis_SOFA'] = X_test.iloc[i]['Sepsis_SOFA'];

       posco=posco+1;

  else:

       pa_error.loc[poserror, 'Paciente'] = X_test.iloc[i]['Paciente'];
       pa_error.loc[poserror, 'Hora'] = X_test.iloc[i]['Hora'];
       pa_error.loc[poserror, 'Bilirubin_total'] = X_test.iloc[i]['Bilirubin_total'];
       pa_error.loc[poserror, 'Creatinine'] = X_test.iloc[i]['Creatinine'];
       pa_error.loc[poserror, 'MAP'] = X_test.iloc[i]['MAP'];
       pa_error.loc[poserror, 'Platelets'] = X_test.iloc[i]['Platelets'];
       pa_error.loc[poserror, 'HR'] = X_test.iloc[i]['HR'];
       pa_error.loc[poserror, 'SepsisLabel'] = X_test.iloc[i]['SepsisLabel'];
       pa_error.loc[poserror, 'Prediccion'] = X_test.iloc[i]['Prediccion'];
       pa_error.loc[poserror, 'AST'] = X_test.iloc[i]['AST'];
       pa_error.loc[poserror, 'Age'] = X_test.iloc[i]['Age'];
       pa_error.loc[poserror, 'Alkalinephos'] = X_test.iloc[i]['Alkalinephos'];
       pa_error.loc[poserror, 'BUN'] = X_test.iloc[i]['BUN'];
       pa_error.loc[poserror, 'BaseExcess'] = X_test.iloc[i]['BaseExcess'];
       pa_error.loc[poserror, 'Bilirubin_direct'] = X_test.iloc[i]['Bilirubin_direct'];
       pa_error.loc[poserror, 'Calcium'] = X_test.iloc[i]['Calcium'];
       pa_error.loc[poserror, 'Chloride'] = X_test.iloc[i]['Chloride'];
       pa_error.loc[poserror, 'DBP'] = X_test.iloc[i]['DBP'];
       pa_error.loc[poserror, 'EtCO2'] = X_test.iloc[i]['EtCO2'];
       pa_error.loc[poserror, 'FiO2'] = X_test.iloc[i]['FiO2'];
       pa_error.loc[poserror, 'Fibrinogen'] = X_test.iloc[i]['Fibrinogen'];
       pa_error.loc[poserror, 'Gender'] = X_test.iloc[i]['Gender'];
       pa_error.loc[poserror, 'Glucose'] = X_test.iloc[i]['Glucose'];
       pa_error.loc[poserror, 'HCO3'] = X_test.iloc[i]['HCO3'];
       pa_error.loc[poserror, 'Hct'] = X_test.iloc[i]['Hct'];
       pa_error.loc[poserror, 'Hgb'] = X_test.iloc[i]['Hgb'];
       pa_error.loc[poserror, 'HospAdmTime'] = X_test.iloc[i]['HospAdmTime'];
       pa_error.loc[poserror, 'ICULOS'] = X_test.iloc[i]['ICULOS'];
       pa_error.loc[poserror, 'Lactate'] = X_test.iloc[i]['Lactate'];
       pa_error.loc[poserror, 'Magnesium'] = X_test.iloc[i]['Magnesium'];
       pa_error.loc[poserror, 'O2Sat'] = X_test.iloc[i]['O2Sat'];
       pa_error.loc[poserror, 'PTT'] = X_test.iloc[i]['PTT'];
       pa_error.loc[poserror, 'PaCO2'] = X_test.iloc[i]['PaCO2'];
       pa_error.loc[poserror, 'Phosphate'] = X_test.iloc[i]['Phosphate'];
       pa_error.loc[poserror, 'Potassium'] = X_test.iloc[i]['Potassium'];
       pa_error.loc[poserror, 'Resp'] = X_test.iloc[i]['Resp'];
       pa_error.loc[poserror, 'SBP'] = X_test.iloc[i]['SBP'];
       pa_error.loc[poserror, 'SaO2'] = X_test.iloc[i]['SaO2'];
       pa_error.loc[poserror, 'Temp'] = X_test.iloc[i]['Temp'];
       pa_error.loc[poserror, 'TroponinI'] = X_test.iloc[i]['TroponinI'];
       pa_error.loc[poserror, 'Unit1'] = X_test.iloc[i]['Unit1'];
       pa_error.loc[poserror, 'Unit2'] = X_test.iloc[i]['Unit2'];
       pa_error.loc[poserror, 'WBC'] = X_test.iloc[i]['WBC'];
       pa_error.loc[poserror, 'pH'] = X_test.iloc[i]['pH'];
       pa_error.loc[poserror, 'Sepsis_SIRS'] = X_test.iloc[i]['Sepsis_SIRS'];
       pa_error.loc[poserror, 'Sepsis_SOFA'] = X_test.iloc[i]['Sepsis_SOFA'];

       poserror=poserror+1;

pa_error
pa_error.to_csv('Pacientes_PCorrecta.csv')

pa_correcto
pa_correcto.to_csv('Pacientes_PErronea.csv')

prueba_correcto = pd.DataFrame()
posco=0

for i in range(0,len(pa_correcto)):
  
  if pa_correcto.loc[i, 'SepsisLabel']== 1 and pa_correcto.loc[i, 'Prediccion'] == 1:
  
       prueba_correcto.loc[posco, 'Paciente'] = pa_correcto.iloc[i]['Paciente'];
       prueba_correcto.loc[posco, 'Hora'] = pa_correcto.iloc[i]['Hora'];
       prueba_correcto.loc[posco, 'Bilirubin_total'] = pa_correcto.iloc[i]['Bilirubin_total'];
       prueba_correcto.loc[posco, 'Creatinine'] = pa_correcto.iloc[i]['Creatinine'];
       prueba_correcto.loc[posco, 'MAP'] = pa_correcto.iloc[i]['MAP'];
       prueba_correcto.loc[posco, 'Platelets'] = pa_correcto.iloc[i]['Platelets'];
       prueba_correcto.loc[posco, 'HR'] = pa_correcto.iloc[i]['HR'];
       prueba_correcto.loc[posco, 'SepsisLabel'] = pa_correcto.iloc[i]['SepsisLabel'];
       prueba_correcto.loc[posco, 'Prediccion'] = pa_correcto.iloc[i]['Prediccion'];
       prueba_correcto.loc[posco, 'AST'] = pa_correcto.iloc[i]['AST'];
       prueba_correcto.loc[posco, 'Age'] = pa_correcto.iloc[i]['Age'];
       prueba_correcto.loc[posco, 'Alkalinephos'] = pa_correcto.iloc[i]['Alkalinephos'];
       prueba_correcto.loc[posco, 'BUN'] = pa_correcto.iloc[i]['BUN'];
       prueba_correcto.loc[posco, 'BaseExcess'] = pa_correcto.iloc[i]['BaseExcess'];
       prueba_correcto.loc[posco, 'Bilirubin_direct'] = pa_correcto.iloc[i]['Bilirubin_direct'];
       prueba_correcto.loc[posco, 'Calcium'] = pa_correcto.iloc[i]['Calcium'];
       prueba_correcto.loc[posco, 'Chloride'] = pa_correcto.iloc[i]['Chloride'];
       prueba_correcto.loc[posco, 'DBP'] = pa_correcto.iloc[i]['DBP'];
       prueba_correcto.loc[posco, 'EtCO2'] = pa_correcto.iloc[i]['EtCO2'];
       prueba_correcto.loc[posco, 'FiO2'] = pa_correcto.iloc[i]['FiO2'];
       prueba_correcto.loc[posco, 'Fibrinogen'] = pa_correcto.iloc[i]['Fibrinogen'];
       prueba_correcto.loc[posco, 'Gender'] = pa_correcto.iloc[i]['Gender'];
       prueba_correcto.loc[posco, 'Glucose'] = pa_correcto.iloc[i]['Glucose'];
       prueba_correcto.loc[posco, 'HCO3'] = pa_correcto.iloc[i]['HCO3'];
       prueba_correcto.loc[posco, 'Hct'] = pa_correcto.iloc[i]['Hct'];
       prueba_correcto.loc[posco, 'Hgb'] = pa_correcto.iloc[i]['Hgb'];
       prueba_correcto.loc[posco, 'HospAdmTime'] = pa_correcto.iloc[i]['HospAdmTime'];
       prueba_correcto.loc[posco, 'ICULOS'] = pa_correcto.iloc[i]['ICULOS'];
       prueba_correcto.loc[posco, 'Lactate'] = pa_correcto.iloc[i]['Lactate'];
       prueba_correcto.loc[posco, 'Magnesium'] = pa_correcto.iloc[i]['Magnesium'];
       prueba_correcto.loc[posco, 'O2Sat'] = pa_correcto.iloc[i]['O2Sat'];
       prueba_correcto.loc[posco, 'PTT'] = pa_correcto.iloc[i]['PTT'];
       prueba_correcto.loc[posco, 'PaCO2'] = pa_correcto.iloc[i]['PaCO2'];
       prueba_correcto.loc[posco, 'Phosphate'] = pa_correcto.iloc[i]['Phosphate'];
       prueba_correcto.loc[posco, 'Potassium'] = pa_correcto.iloc[i]['Potassium'];
       prueba_correcto.loc[posco, 'Resp'] = pa_correcto.iloc[i]['Resp'];
       prueba_correcto.loc[posco, 'SBP'] = pa_correcto.iloc[i]['SBP'];
       prueba_correcto.loc[posco, 'SaO2'] = pa_correcto.iloc[i]['SaO2'];
       prueba_correcto.loc[posco, 'Temp'] = pa_correcto.iloc[i]['Temp'];
       prueba_correcto.loc[posco, 'TroponinI'] = pa_correcto.iloc[i]['TroponinI'];
       prueba_correcto.loc[posco, 'Unit1'] = pa_correcto.iloc[i]['Unit1'];
       prueba_correcto.loc[posco, 'Unit2'] = pa_correcto.iloc[i]['Unit2'];
       prueba_correcto.loc[posco, 'WBC'] = pa_correcto.iloc[i]['WBC'];
       prueba_correcto.loc[posco, 'pH'] = pa_correcto.iloc[i]['pH'];
       prueba_correcto.loc[posco, 'Sepsis_SIRS'] = pa_correcto.iloc[i]['Sepsis_SIRS'];
       prueba_correcto.loc[posco, 'Sepsis_SOFA'] = pa_correcto.iloc[i]['Sepsis_SOFA'];

       posco= posco + 1
    
  if posco == 10 :
      break;

prueba_error = pd.DataFrame()
posco=0

for i in range(0,len(pa_error)):
  
       prueba_error.loc[posco, 'Paciente'] = pa_error.iloc[i]['Paciente'];
       prueba_error.loc[posco, 'Hora'] = pa_error.iloc[i]['Hora'];
       prueba_error.loc[posco, 'Bilirubin_total'] = pa_error.iloc[i]['Bilirubin_total'];
       prueba_error.loc[posco, 'Creatinine'] = pa_error.iloc[i]['Creatinine'];
       prueba_error.loc[posco, 'MAP'] = pa_error.iloc[i]['MAP'];
       prueba_error.loc[posco, 'Platelets'] = pa_error.iloc[i]['Platelets'];
       prueba_error.loc[posco, 'HR'] = pa_error.iloc[i]['HR'];
       prueba_error.loc[posco, 'SepsisLabel'] = pa_error.iloc[i]['SepsisLabel'];
       prueba_error.loc[posco, 'Prediccion'] = pa_error.iloc[i]['Prediccion'];
       prueba_error.loc[posco, 'AST'] = pa_error.iloc[i]['AST'];
       prueba_error.loc[posco, 'Age'] = pa_error.iloc[i]['Age'];
       prueba_error.loc[posco, 'Alkalinephos'] = pa_error.iloc[i]['Alkalinephos'];
       prueba_error.loc[posco, 'BUN'] = pa_error.iloc[i]['BUN'];
       prueba_error.loc[posco, 'BaseExcess'] = pa_error.iloc[i]['BaseExcess'];
       prueba_error.loc[posco, 'Bilirubin_direct'] = pa_error.iloc[i]['Bilirubin_direct'];
       prueba_error.loc[posco, 'Calcium'] = pa_error.iloc[i]['Calcium'];
       prueba_error.loc[posco, 'Chloride'] = pa_error.iloc[i]['Chloride'];
       prueba_error.loc[posco, 'DBP'] = pa_error.iloc[i]['DBP'];
       prueba_error.loc[posco, 'EtCO2'] = pa_error.iloc[i]['EtCO2'];
       prueba_error.loc[posco, 'FiO2'] = pa_error.iloc[i]['FiO2'];
       prueba_error.loc[posco, 'Fibrinogen'] = pa_error.iloc[i]['Fibrinogen'];
       prueba_error.loc[posco, 'Gender'] = pa_error.iloc[i]['Gender'];
       prueba_error.loc[posco, 'Glucose'] = pa_error.iloc[i]['Glucose'];
       prueba_error.loc[posco, 'HCO3'] = pa_error.iloc[i]['HCO3'];
       prueba_error.loc[posco, 'Hct'] = pa_error.iloc[i]['Hct'];
       prueba_error.loc[posco, 'Hgb'] = pa_error.iloc[i]['Hgb'];
       prueba_error.loc[posco, 'HospAdmTime'] = pa_error.iloc[i]['HospAdmTime'];
       prueba_error.loc[posco, 'ICULOS'] = pa_error.iloc[i]['ICULOS'];
       prueba_error.loc[posco, 'Lactate'] = pa_error.iloc[i]['Lactate'];
       prueba_error.loc[posco, 'Magnesium'] = pa_error.iloc[i]['Magnesium'];
       prueba_error.loc[posco, 'O2Sat'] = pa_error.iloc[i]['O2Sat'];
       prueba_error.loc[posco, 'PTT'] = pa_error.iloc[i]['PTT'];
       prueba_error.loc[posco, 'PaCO2'] = pa_error.iloc[i]['PaCO2'];
       prueba_error.loc[posco, 'Phosphate'] = pa_error.iloc[i]['Phosphate'];
       prueba_error.loc[posco, 'Potassium'] = pa_error.iloc[i]['Potassium'];
       prueba_error.loc[posco, 'Resp'] = pa_error.iloc[i]['Resp'];
       prueba_error.loc[posco, 'SBP'] = pa_error.iloc[i]['SBP'];
       prueba_error.loc[posco, 'SaO2'] = pa_error.iloc[i]['SaO2'];
       prueba_error.loc[posco, 'Temp'] = pa_error.iloc[i]['Temp'];
       prueba_error.loc[posco, 'TroponinI'] = pa_error.iloc[i]['TroponinI'];
       prueba_error.loc[posco, 'Unit1'] = pa_error.iloc[i]['Unit1'];
       prueba_error.loc[posco, 'Unit2'] = pa_error.iloc[i]['Unit2'];
       prueba_error.loc[posco, 'WBC'] = pa_error.iloc[i]['WBC'];
       prueba_error.loc[posco, 'pH'] = pa_error.iloc[i]['pH'];
       prueba_error.loc[posco, 'Sepsis_SIRS'] = pa_error.iloc[i]['Sepsis_SIRS'];
       prueba_error.loc[posco, 'Sepsis_SOFA'] = pa_error.iloc[i]['Sepsis_SOFA'];

       posco= posco + 1
       
       if posco == 10 :
          break;

prueba_correcto.to_csv('prueba_correcto.csv')
prueba_correcto

prueba_error.to_csv('prueba_error.csv')
prueba_error

"""#Graficas"""

plt.figure(figsize=(15,20))
plt.subplots_adjust( wspace=0.3, hspace=0.7)

plt.subplot(221)
Slabel = prueba_correcto.groupby(['HR']).size()
Slabel.plot.bar(color= 'orange')

plt.subplot(222)
Slabel2 = prueba_error.groupby(['HR']).size()
Slabel2.plot.bar(color= 'orange')

x_values = prueba_correcto['Paciente']
y_values = prueba_correcto['HR']


plt.figure(figsize=(15,20))
plt.subplots_adjust( wspace=0.3, hspace=0.7)


plt.bar(x_values, y_values) # El gráfico
plt.title('HR Pacientes predicciones correctas')      #El título
ax = plt.subplot()                   #Axis
ax.set_xticks(x_values)             #Eje x
ax.set_xticklabels(x_values)        #Etiquetas del eje x
ax.set_xlabel('Pacientes')  #Nombre del eje x
ax.set_ylabel('Valor')  #Nombre del eje y

#--------------------------------------------------------------------------------------------------#
fig = plt.figure(figsize=(20,10))
fig.tight_layout()

plt.subplot(121) # Subplot para visualizar las graficas en un mismo plot

x_values = prueba_correcto['Paciente']
y_values = prueba_correcto['Hora']
plt.plot(x_values,y_values,'o-', label= 'datos', linewidth = 0.5) #Datos filtrados

plt.title("Pacientes Predicción correcta (Hora)") # Titulo grafica
plt.ylabel('Escala') # Titulo Y
plt.xlabel('Pacientes') # Titulo X

#--------------------------------------------------------------------------------------------------#

plt.subplot(122) # Subplot para visualizar las graficas en un mismo plot

x_values = prueba_error['Paciente']
y_values = prueba_error['Hora']
plt.plot(x_values,y_values,'o-', label= 'datos', linewidth = 0.5) #Datos filtrados


plt.title("Pacientes Predicción incorrecta (Hora)") # Titulo grafica
plt.ylabel('Escala') # Titulo Y
plt.xlabel('Pacientes') # Titulo X
#--------------------------------------------------------------------------------------------------#

#--------------------------------------------------------------------------------------------------#
fig = plt.figure(figsize=(20,10))
fig.tight_layout()

plt.subplot(121) # Subplot para visualizar las graficas en un mismo plot

x_values = prueba_correcto['Paciente']
y_values = prueba_correcto['MAP']
plt.plot(x_values,y_values,'o-', label= 'datos', linewidth = 0.5) #Datos filtrados

plt.title("Pacientes Predicción correcta (MAP)") # Titulo grafica
plt.ylabel('Escala') # Titulo Y
plt.xlabel('Pacientes') # Titulo X

#--------------------------------------------------------------------------------------------------#

plt.subplot(122) # Subplot para visualizar las graficas en un mismo plot

x_values = prueba_error['Paciente']
y_values = prueba_error['MAP']
plt.plot(x_values,y_values,'o-', label= 'datos', linewidth = 0.5) #Datos filtrados


plt.title("Pacientes Predicción incorrecta (MAP)") # Titulo grafica
plt.ylabel('Escala') # Titulo Y
plt.xlabel('Pacientes') # Titulo X
#--------------------------------------------------------------------------------------------------#

#--------------------------------------------------------------------------------------------------#
fig = plt.figure(figsize=(20,10))
fig.tight_layout()

plt.subplot(121) # Subplot para visualizar las graficas en un mismo plot

x_values = prueba_correcto['Paciente']
y_values = prueba_correcto['HR']
plt.plot(x_values,y_values,'o-', label= 'datos', linewidth = 0.5) #Datos filtrados

plt.title("Pacientes Predicción correcta (HR)") # Titulo grafica
plt.ylabel('Escala') # Titulo Y
plt.xlabel('Pacientes') # Titulo X

#--------------------------------------------------------------------------------------------------#

plt.subplot(122) # Subplot para visualizar las graficas en un mismo plot

x_values = prueba_error['Paciente']
y_values = prueba_error['HR']
plt.plot(x_values,y_values,'o-', label= 'datos', linewidth = 0.5) #Datos filtrados


plt.title("Pacientes Predicción incorrecta (HR)") # Titulo grafica
plt.ylabel('Escala') # Titulo Y
plt.xlabel('Pacientes') # Titulo X
#--------------------------------------------------------------------------------------------------#

#--------------------------------------------------------------------------------------------------#
fig = plt.figure(figsize=(20,10))
fig.tight_layout()

plt.subplot(121) # Subplot para visualizar las graficas en un mismo plot

x_values = prueba_correcto['Paciente']
y_values = prueba_correcto['Age']
plt.plot(x_values,y_values,'o-', label= 'datos', linewidth = 0.5) #Datos filtrados

plt.title("Pacientes Predicción correcta (Age)") # Titulo grafica
plt.ylabel('Escala') # Titulo Y
plt.xlabel('Pacientes') # Titulo X

#--------------------------------------------------------------------------------------------------#

plt.subplot(122) # Subplot para visualizar las graficas en un mismo plot

x_values = prueba_error['Paciente']
y_values = prueba_error['Age']
plt.plot(x_values,y_values,'o-', label= 'datos', linewidth = 0.5) #Datos filtrados


plt.title("Pacientes Predicción incorrecta (Age)") # Titulo grafica
plt.ylabel('Escala') # Titulo Y
plt.xlabel('Pacientes') # Titulo X
#--------------------------------------------------------------------------------------------------#

#--------------------------------------------------------------------------------------------------#
fig = plt.figure(figsize=(20,10))
fig.tight_layout()

plt.subplot(121) # Subplot para visualizar las graficas en un mismo plot

x_values = prueba_correcto['Paciente']
y_values = prueba_correcto['DBP']
plt.plot(x_values,y_values,'o-', label= 'datos', linewidth = 0.5) #Datos filtrados

plt.title("Pacientes Predicción correcta (DBP)") # Titulo grafica
plt.ylabel('Escala') # Titulo Y
plt.xlabel('Pacientes') # Titulo X

#--------------------------------------------------------------------------------------------------#

plt.subplot(122) # Subplot para visualizar las graficas en un mismo plot

x_values = prueba_error['Paciente']
y_values = prueba_error['DBP']
plt.plot(x_values,y_values,'o-', label= 'datos', linewidth = 0.5) #Datos filtrados


plt.title("Pacientes Predicción incorrecta (DBP)") # Titulo grafica
plt.ylabel('Escala') # Titulo Y
plt.xlabel('Pacientes') # Titulo X
#--------------------------------------------------------------------------------------------------#

#--------------------------------------------------------------------------------------------------#
fig = plt.figure(figsize=(20,10))
fig.tight_layout()

plt.subplot(121) # Subplot para visualizar las graficas en un mismo plot

x_values = prueba_correcto['Paciente']
y_values = prueba_correcto['FiO2']
plt.plot(x_values,y_values,'o-', label= 'datos', linewidth = 0.5) #Datos filtrados

plt.title("Pacientes Predicción correcta (FiO2)") # Titulo grafica
plt.ylabel('Escala') # Titulo Y
plt.xlabel('Pacientes') # Titulo X

#--------------------------------------------------------------------------------------------------#

plt.subplot(122) # Subplot para visualizar las graficas en un mismo plot

x_values = prueba_error['Paciente']
y_values = prueba_error['FiO2']
plt.plot(x_values,y_values,'o-', label= 'datos', linewidth = 0.5) #Datos filtrados


plt.title("Pacientes Predicción incorrecta (FiO2)") # Titulo grafica
plt.ylabel('Escala') # Titulo Y
plt.xlabel('Pacientes') # Titulo X
#--------------------------------------------------------------------------------------------------#

#--------------------------------------------------------------------------------------------------#
fig = plt.figure(figsize=(20,10))
fig.tight_layout()

plt.subplot(121) # Subplot para visualizar las graficas en un mismo plot

x_values = prueba_correcto['Paciente']
y_values = prueba_correcto['Gender']
plt.plot(x_values,y_values,'o-', label= 'datos', linewidth = 0.5) #Datos filtrados

plt.title("Pacientes Predicción correcta (Gender)") # Titulo grafica
plt.ylabel('Escala') # Titulo Y
plt.xlabel('Pacientes') # Titulo X

#--------------------------------------------------------------------------------------------------#

plt.subplot(122) # Subplot para visualizar las graficas en un mismo plot

x_values = prueba_error['Paciente']
y_values = prueba_error['Gender']
plt.plot(x_values,y_values,'o-', label= 'datos', linewidth = 0.5) #Datos filtrados


plt.title("Pacientes Predicción incorrecta (Gender)") # Titulo grafica
plt.ylabel('Escala') # Titulo Y
plt.xlabel('Pacientes') # Titulo X
#--------------------------------------------------------------------------------------------------#

#--------------------------------------------------------------------------------------------------#
fig = plt.figure(figsize=(20,10))
fig.tight_layout()

plt.subplot(121) # Subplot para visualizar las graficas en un mismo plot

x_values = prueba_correcto['Paciente']
y_values = prueba_correcto['HospAdmTime']
plt.plot(x_values,y_values,'o-', label= 'datos', linewidth = 0.5) #Datos filtrados

plt.title("Pacientes Predicción correcta (HospAdmTime)") # Titulo grafica
plt.ylabel('Escala') # Titulo Y
plt.xlabel('Pacientes') # Titulo X

#--------------------------------------------------------------------------------------------------#

plt.subplot(122) # Subplot para visualizar las graficas en un mismo plot

x_values = prueba_error['Paciente']
y_values = prueba_error['HospAdmTime']
plt.plot(x_values,y_values,'o-', label= 'datos', linewidth = 0.5) #Datos filtrados


plt.title("Pacientes Predicción incorrecta (HospAdmTime)") # Titulo grafica
plt.ylabel('Escala') # Titulo Y
plt.xlabel('Pacientes') # Titulo X
#--------------------------------------------------------------------------------------------------#

#--------------------------------------------------------------------------------------------------#
fig = plt.figure(figsize=(20,10))
fig.tight_layout()

plt.subplot(121) # Subplot para visualizar las graficas en un mismo plot

x_values = prueba_correcto['Paciente']
y_values = prueba_correcto['ICULOS']
plt.plot(x_values,y_values,'o-', label= 'datos', linewidth = 0.5) #Datos filtrados

plt.title("Pacientes Predicción correcta (ICULOS)") # Titulo grafica
plt.ylabel('Escala') # Titulo Y
plt.xlabel('Pacientes') # Titulo X

#--------------------------------------------------------------------------------------------------#

plt.subplot(122) # Subplot para visualizar las graficas en un mismo plot

x_values = prueba_error['Paciente']
y_values = prueba_error['ICULOS']
plt.plot(x_values,y_values,'o-', label= 'datos', linewidth = 0.5) #Datos filtrados


plt.title("Pacientes Predicción incorrecta (ICULOS)") # Titulo grafica
plt.ylabel('Escala') # Titulo Y
plt.xlabel('Pacientes') # Titulo X
#--------------------------------------------------------------------------------------------------#

#--------------------------------------------------------------------------------------------------#
fig = plt.figure(figsize=(20,10))
fig.tight_layout()

plt.subplot(121) # Subplot para visualizar las graficas en un mismo plot

x_values = prueba_correcto['Paciente']
y_values = prueba_correcto['O2Sat']
plt.plot(x_values,y_values,'o-', label= 'datos', linewidth = 0.5) #Datos filtrados

plt.title("Pacientes Predicción correcta (O2Sat)") # Titulo grafica
plt.ylabel('Escala') # Titulo Y
plt.xlabel('Pacientes') # Titulo X

#--------------------------------------------------------------------------------------------------#

plt.subplot(122) # Subplot para visualizar las graficas en un mismo plot

x_values = prueba_error['Paciente']
y_values = prueba_error['O2Sat']
plt.plot(x_values,y_values,'o-', label= 'datos', linewidth = 0.5) #Datos filtrados


plt.title("Pacientes Predicción incorrecta (O2Sat)") # Titulo grafica
plt.ylabel('Escala') # Titulo Y
plt.xlabel('Pacientes') # Titulo X
#--------------------------------------------------------------------------------------------------#

#--------------------------------------------------------------------------------------------------#
fig = plt.figure(figsize=(20,10))
fig.tight_layout()

plt.subplot(121) # Subplot para visualizar las graficas en un mismo plot

x_values = prueba_correcto['Paciente']
y_values = prueba_correcto['Resp']
plt.plot(x_values,y_values,'o-', label= 'datos', linewidth = 0.5) #Datos filtrados

plt.title("Pacientes Predicción correcta (Resp)") # Titulo grafica
plt.ylabel('Escala') # Titulo Y
plt.xlabel('Pacientes') # Titulo X

#--------------------------------------------------------------------------------------------------#

plt.subplot(122) # Subplot para visualizar las graficas en un mismo plot

x_values = prueba_error['Paciente']
y_values = prueba_error['Resp']
plt.plot(x_values,y_values,'o-', label= 'datos', linewidth = 0.5) #Datos filtrados


plt.title("Pacientes Predicción incorrecta (Resp)") # Titulo grafica
plt.ylabel('Escala') # Titulo Y
plt.xlabel('Pacientes') # Titulo X
#--------------------------------------------------------------------------------------------------#

#--------------------------------------------------------------------------------------------------#
fig = plt.figure(figsize=(20,10))
fig.tight_layout()

plt.subplot(121) # Subplot para visualizar las graficas en un mismo plot

x_values = prueba_correcto['Paciente']
y_values = prueba_correcto['SBP']
plt.plot(x_values,y_values,'o-', label= 'datos', linewidth = 0.5) #Datos filtrados

plt.title("Pacientes Predicción correcta (SBP)") # Titulo grafica
plt.ylabel('Escala') # Titulo Y
plt.xlabel('Pacientes') # Titulo X

#--------------------------------------------------------------------------------------------------#

plt.subplot(122) # Subplot para visualizar las graficas en un mismo plot

x_values = prueba_error['Paciente']
y_values = prueba_error['SBP']
plt.plot(x_values,y_values,'o-', label= 'datos', linewidth = 0.5) #Datos filtrados


plt.title("Pacientes Predicción incorrecta (SBP)") # Titulo grafica
plt.ylabel('Escala') # Titulo Y
plt.xlabel('Pacientes') # Titulo X
#--------------------------------------------------------------------------------------------------#

#--------------------------------------------------------------------------------------------------#
fig = plt.figure(figsize=(20,10))
fig.tight_layout()

plt.subplot(121) # Subplot para visualizar las graficas en un mismo plot

x_values = prueba_correcto['Paciente']
y_values = prueba_correcto['Temp']
plt.plot(x_values,y_values,'o-', label= 'datos', linewidth = 0.5) #Datos filtrados

plt.title("Pacientes Predicción correcta (Temp)") # Titulo grafica
plt.ylabel('Escala') # Titulo Y
plt.xlabel('Pacientes') # Titulo X

#--------------------------------------------------------------------------------------------------#

plt.subplot(122) # Subplot para visualizar las graficas en un mismo plot

x_values = prueba_error['Paciente']
y_values = prueba_error['Temp']
plt.plot(x_values,y_values,'o-', label= 'datos', linewidth = 0.5) #Datos filtrados


plt.title("Pacientes Predicción incorrecta (Temp)") # Titulo grafica
plt.ylabel('Escala') # Titulo Y
plt.xlabel('Pacientes') # Titulo X
#--------------------------------------------------------------------------------------------------#

#--------------------------------------------------------------------------------------------------#
fig = plt.figure(figsize=(20,10))
fig.tight_layout()

plt.subplot(121) # Subplot para visualizar las graficas en un mismo plot

x_values = prueba_correcto['Paciente']
y_values = prueba_correcto['Unit1']
plt.plot(x_values,y_values,'o-', label= 'datos', linewidth = 0.5) #Datos filtrados

plt.title("Pacientes Predicción correcta (Unit1)") # Titulo grafica
plt.ylabel('Escala') # Titulo Y
plt.xlabel('Pacientes') # Titulo X

#--------------------------------------------------------------------------------------------------#

plt.subplot(122) # Subplot para visualizar las graficas en un mismo plot

x_values = prueba_error['Paciente']
y_values = prueba_error['Unit1']
plt.plot(x_values,y_values,'o-', label= 'datos', linewidth = 0.5) #Datos filtrados


plt.title("Pacientes Predicción incorrecta (Unit1)") # Titulo grafica
plt.ylabel('Escala') # Titulo Y
plt.xlabel('Pacientes') # Titulo X
#--------------------------------------------------------------------------------------------------#

#--------------------------------------------------------------------------------------------------#
fig = plt.figure(figsize=(20,10))
fig.tight_layout()

plt.subplot(121) # Subplot para visualizar las graficas en un mismo plot

x_values = prueba_correcto['Paciente']
y_values = prueba_correcto['Unit2']
plt.plot(x_values,y_values,'o-', label= 'datos', linewidth = 0.5) #Datos filtrados

plt.title("Pacientes Predicción correcta (Unit2)") # Titulo grafica
plt.ylabel('Escala') # Titulo Y
plt.xlabel('Pacientes') # Titulo X

#--------------------------------------------------------------------------------------------------#

plt.subplot(122) # Subplot para visualizar las graficas en un mismo plot

x_values = prueba_error['Paciente']
y_values = prueba_error['Unit2']
plt.plot(x_values,y_values,'o-', label= 'datos', linewidth = 0.5) #Datos filtrados


plt.title("Pacientes Predicción incorrecta (Unit2)") # Titulo grafica
plt.ylabel('Escala') # Titulo Y
plt.xlabel('Pacientes') # Titulo X
#--------------------------------------------------------------------------------------------------#