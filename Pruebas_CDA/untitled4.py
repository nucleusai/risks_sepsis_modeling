# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Btt69apPcarwbwayG9m77uNCWEN8iASt
"""

import numpy as np
import matplotlib.pyplot as plt
import math
import seaborn as sn
import pandas as pd
from math import e
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn import linear_model
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import  accuracy_score
from sklearn.metrics import roc_auc_score
from sklearn.metrics import  roc_curve
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error

# Se carga la data seleccionada para el estudio
csv_path = '/content/General_SepsisCompleto.csv'
Datamodelo = pd.read_csv(csv_path, sep=',')

Datamodelo

Datamodelo.groupby(['SepsisLabel']).size().reset_index(name='Cantidad')

Datamodelo.groupby(['SIRS_Sepsis']).size().reset_index(name='Cantidad')

Datamodelo.groupby(['Grupo']).size().reset_index(name='Cantidad')

Datamodelo.groupby(['SOFA_Sepsis']).size().reset_index(name='Cantidad')

DatosReducido = Datamodelo[['Bilirubin_total', 'Creatinine', 'HR', 'MAP', 'Platelets', 'Temp', 'WBC', 'SepsisLabel']].copy() # Datos que se utilizan para el analisis SOFA
DatosReducido

DatosReducido.describe()

DatosReducido.hist("HR")

DatosReducido.hist("MAP")

DatosReducido.hist("Bilirubin_total")

DatosReducido.hist("Creatinine")

DatosReducido.hist("Platelets")

DatosReducido.hist("Temp")

DatosReducido.hist("WBC")

HR = 0
 MAP = 0
 Bilirubin = 0
 Creatinine = 0
 Platelets = 0
 Temp = 0
 WBC = 0
 
for i in range(0,len(DatosReducido)): 
  if DatosReducido.loc[i, 'HR'] != 0:
     HR = DatosReducido.loc[i, 'HR']
     break

for i in range(0,len(DatosReducido)): 
  
  if DatosReducido.loc[i, 'MAP'] != 0:
     MAP = DatosReducido.loc[i, 'MAP']
     break

for i in range(0,len(DatosReducido)): 
  
  if DatosReducido.loc[i, 'Bilirubin_total'] != 0:
     Bilirubin = DatosReducido.loc[i, 'Bilirubin_total']
     break

for i in range(0,len(DatosReducido)): 
  
  if DatosReducido.loc[i, 'Creatinine'] != 0:
     Creatinine = DatosReducido.loc[i, 'Creatinine']
     break


for i in range(0,len(DatosReducido)): 
  
  if DatosReducido.loc[i, 'Platelets'] != 0:
     Platelets = DatosReducido.loc[i, 'Platelets']
     break

for i in range(0,len(DatosReducido)): 
  
  if DatosReducido.loc[i, 'Temp'] != 0:
     Temp = DatosReducido.loc[i, 'Temp']
     break

for i in range(0,len(DatosReducido)): 
  
  if DatosReducido.loc[i, 'WBC'] != 0:
     WBC = DatosReducido.loc[i, 'WBC']
     break
     
print(HR)
print(MAP)
print(Bilirubin)
print(Creatinine)
print(Platelets)
print(Temp)
print(WBC)

for i in range(0,len(DatosReducido)): 

  if DatosReducido.loc[i, 'HR'] == 0:
     DatosReducido.loc[i, 'HR']= HR
  else:
     HR = DatosReducido.loc[i, 'HR']

  if DatosReducido.loc[i, 'MAP'] == 0:
     DatosReducido.loc[i, 'MAP']= MAP
  else:
     MAP = DatosReducido.loc[i, 'MAP']

  if DatosReducido.loc[i, 'Bilirubin_total'] == 0:
     DatosReducido.loc[i, 'Bilirubin_total']= Bilirubin
  else:
     Bilirubin = DatosReducido.loc[i, 'Bilirubin_total']

  if DatosReducido.loc[i, 'Creatinine'] == 0:
     DatosReducido.loc[i, 'Creatinine']= Creatinine
  else:
     Creatinine = DatosReducido.loc[i, 'Creatinine']

  if DatosReducido.loc[i, 'Platelets'] == 0:
     DatosReducido.loc[i, 'Platelets']= Platelets
  else:
     Platelets = DatosReducido.loc[i, 'Platelets']

  if DatosReducido.loc[i, 'Temp'] == 0:
     DatosReducido.loc[i, 'Temp']= Temp
  else:
     Temp = DatosReducido.loc[i, 'Temp']

  if DatosReducido.loc[i, 'WBC'] == 0:
     DatosReducido.loc[i, 'WBC']= WBC
  else:
     WBC = DatosReducido.loc[i, 'WBC']

DatosReducido.describe()

DatosReducido.hist("HR")

DatosReducido.hist("MAP")

DatosReducido.hist("Bilirubin_total")

DatosReducido.hist("Creatinine")

DatosReducido.hist("Platelets")

DatosReducido.hist("Temp")

DatosReducido.hist("WBC")

DatosReducido.kin()

datos_entrenamiento = DatosReducido.sample(frac=0.8, random_state=0)
datos_test = DatosReducido.drop(datos_entrenamiento.index)

etiquetas_entrenamiento = datos_entrenamiento.pop('SepsisLabel')
etiquetas_test = datos_test.pop('SepsisLabel')

modelo = LogisticRegression()
modelo.fit(datos_entrenamiento,etiquetas_entrenamiento)

predicciones = modelo.predict(datos_test)
predicciones

error = np.sqrt(mean_squared_error(etiquetas_test, predicciones))
print("Error porcentual : %f" % (error*100))