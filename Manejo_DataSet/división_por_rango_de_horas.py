# -*- coding: utf-8 -*-
"""Divisi贸n por rango de horas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aEUc6UUuhZ_52InF3IneM5dJMVZ0O3b5

## Librerias
"""

import numpy as np
import matplotlib.pyplot as plt
import math
import seaborn as sn
import pandas as pd
from math import e
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn import linear_model
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import  accuracy_score
from sklearn.metrics import roc_auc_score
from sklearn.metrics import  roc_curve
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
from sklearn.ensemble import RandomForestClassifier
from sklearn import preprocessing
from sklearn.model_selection import StratifiedShuffleSplit
from mlxtend.plotting import plot_confusion_matrix
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import f1_score

"""# Dataset entregado por el CDA creado en mongodb"""

csv_path = '/content/NewDataCompletSepsisMongo.csv'
GSepsis = pd.read_csv(csv_path, sep=',')

GSepsis

bins = [-1, 119, 220,400]
rango= ["1","2","3"]
GSepsis["HoraG"] = pd.cut(GSepsis["Hora"], bins, labels= rango)
  
GSepsis = GSepsis.drop(GSepsis[GSepsis['HoraG']== '1'].index)
GSepsis = GSepsis.drop(GSepsis[GSepsis['HoraG']== '3'].index)
GSepsis.to_csv('PC120-220.csv')

"""# Llamado del primer dataset a utilizar (Pacientes entre 120 a 220 horas de hospitalizaci贸n)"""

csv_path = '/content/PC120-220.csv'
GSepsis = pd.read_csv(csv_path, sep=',')

GSepsis.rename({"Unnamed: 0":"a"}, axis="columns", inplace=True)
GSepsis.rename({"Unnamed: 0.1":"b"}, axis="columns", inplace=True)
GSepsis.drop(["a"], axis=1, inplace=True)
GSepsis.drop(["b"], axis=1, inplace=True)

GSepsis

"""#Divisi贸n del dataset por grupo horario (Creaci贸n de los cuatro dataframe diferentes G1-G2-G3-G4)"""

bins = [119, 145, 146, 170, 171, 195, 196, 220]
rango= ["1","2","3","4","5","6","7"]
GSepsis["HoraG"] = pd.cut(GSepsis["Hora"], bins, labels= rango)
G1 = GSepsis.copy() 
G2 = GSepsis.copy() 
G3 = GSepsis.copy() 
G4 = GSepsis.copy() 
  
G1 = G1.drop(G1[G1['HoraG']== '2'].index)
G1 = G1.drop(G1[G1['HoraG']== '3'].index)
G1 = G1.drop(G1[G1['HoraG']== '4'].index)
G1 = G1.drop(G1[G1['HoraG']== '5'].index)
G1 = G1.drop(G1[G1['HoraG']== '6'].index)
G1 = G1.drop(G1[G1['HoraG']== '7'].index)
G1.to_csv('G1-25Horas.csv')

G2 = G2.drop(G2[G2['HoraG']== '1'].index)
G2 = G2.drop(G2[G2['HoraG']== '4'].index)
G2 = G2.drop(G2[G2['HoraG']== '5'].index)
G2 = G2.drop(G2[G2['HoraG']== '6'].index)
G2 = G2.drop(G2[G2['HoraG']== '7'].index)
G2.to_csv('G2-50Horas.csv')

G3 = G3.drop(G3[G3['HoraG']== '1'].index)
G3 = G3.drop(G3[G3['HoraG']== '2'].index)
G3 = G3.drop(G3[G3['HoraG']== '3'].index)
G3 = G3.drop(G3[G3['HoraG']== '6'].index)
G3 = G3.drop(G3[G3['HoraG']== '7'].index)
G3.to_csv('G3-75Horas.csv')

G4 = G4.drop(G4[G4['HoraG']== '1'].index)
G4 = G4.drop(G4[G4['HoraG']== '2'].index)
G4 = G4.drop(G4[G4['HoraG']== '3'].index)
G4 = G4.drop(G4[G4['HoraG']== '4'].index)
G4 = G4.drop(G4[G4['HoraG']== '5'].index)
G4.to_csv('G4-100Horas.csv')

"""# Proceso de registros de pacientes (train y test) G1 primeras 25 horas

"""

csv_path = '/content/trainset.csv'
trainset = pd.read_csv(csv_path, sep=',')

csv_path = '/content/G1-25Horas.csv'
G1 = pd.read_csv(csv_path, sep=',')

dfdatosG1=pd.DataFrame();
registros = 0;
band=0;

for i in range(0,len(trainset)):

    paciente = trainset.loc[i, 'Paciente']
    registros = 0;
    band= 0;
    
    for j in range(0,len(G1)):
      
      if (G1.loc[j, 'Paciente'] == paciente):
        
        if (band == 0):
            band=1;
            i = paciente;
            registros = registros + 1;
           
        else:
           registros = registros + 1;
    
    dfdatosG1.loc[i, 'CantidadRegistrosTrain'] = registros;

csv_path = '/content/testset.csv'
testset = pd.read_csv(csv_path, sep=',')

csv_path = '/content/G1-25Horas.csv'
G1 = pd.read_csv(csv_path, sep=',')

dfTestG1=pd.DataFrame();
registros = 0;
band=0;

for i in range(0,len(testset)):

    paciente = testset.loc[i, 'Paciente']
    registros = 0;
    band= 0;
    
    for j in range(0,len(G1)):
      
      if (G1.loc[j, 'Paciente'] == paciente):
        
        if (band == 0):
            band=1;
            dfdatosG1.loc[i, 'PacienteTest'] = paciente;
            dfTestG1.loc[i, 'PacienteTest'] = paciente;
            registros = registros + 1;
           
        else:
           registros = registros + 1;
    
    dfdatosG1.loc[i, 'CantidadRegistrosTest'] = registros;
    dfTestG1.loc[i, 'CantidadRegistrosTest'] = registros;

dfdatosG1.to_csv('ResultadosG1.csv')
dfdatosG1

"""# Proceso de registros de pacientes (train y test) G2 26-50 horas

"""

csv_path = '/content/trainset.csv'
trainset = pd.read_csv(csv_path, sep=',')

csv_path = '/content/G2-50Horas.csv'
G2 = pd.read_csv(csv_path, sep=',')

dfdatosG2=pd.DataFrame();
registros = 0;
band=0;
pos = 0;

for i in range(0,len(trainset)):

    paciente = trainset.loc[i, 'Paciente']
    registros = 0;
    band= 0;
    
    for j in range(0,len(G2)):
      
      if (G2.loc[j, 'Paciente'] == paciente):
        
        if (band == 0):
            band=1;
            dfdatosG2.loc[pos, 'PacienteTrain'] = paciente;
            registros = registros + 1;
        else:
           registros = registros + 1;

    if (band == 1):
      dfdatosG2.loc[pos, 'CantidadRegistrosTrain'] = registros; 
      pos = pos +1;

csv_path = '/content/testset.csv'
testset = pd.read_csv(csv_path, sep=',')

csv_path = '/content/G2-50Horas.csv'
G2 = pd.read_csv(csv_path, sep=',')

dfTestG2=pd.DataFrame();
registros = 0;
band=0;
pos = 0;

for i in range(0,len(testset)):

    paciente = testset.loc[i, 'Paciente']
    registros = 0;
    band= 0; 
    
    for j in range(0,len(G2)):
      
      if (G2.loc[j, 'Paciente'] == paciente):
        
        if (band == 0):
            band=1;
            dfdatosG2.loc[pos, 'PacienteTest'] = paciente;
            dfTestG2.loc[pos, 'PacienteTest'] = paciente;
            registros = registros + 1;
        else:
           registros = registros + 1;

    if (band==1):
      dfdatosG2.loc[pos, 'CantidadRegistrosTest'] = registros;
      dfTestG2.loc[pos, 'CantidadRegistrosTest'] = registros;
      pos = pos +1;

dfdatosG2.to_csv('ResultadosG2.csv')
dfdatosG2

"""# Proceso de registros de pacientes (train y test) G3 51-75 horas

"""

csv_path = '/content/trainset.csv'
trainset = pd.read_csv(csv_path, sep=',')

csv_path = '/content/G3-75Horas.csv'
G3 = pd.read_csv(csv_path, sep=',')

dfdatosG3=pd.DataFrame();
registros = 0;
band=0;
pos = 0;

for i in range(0,len(trainset)):

    paciente = trainset.loc[i, 'Paciente']
    registros = 0;
    band= 0;
    
    for j in range(0,len(G3)):
      
      if (G3.loc[j, 'Paciente'] == paciente):
        
        if (band == 0):
            band=1;
            dfdatosG3.loc[pos, 'PacienteTrain'] = paciente;
            registros = registros + 1;
        else:
           registros = registros + 1;

    if (band == 1):
      dfdatosG3.loc[pos, 'CantidadRegistrosTrain'] = registros; 
      pos = pos +1;

csv_path = '/content/testset.csv'
testset = pd.read_csv(csv_path, sep=',')

csv_path = '/content/G3-75Horas.csv'
G3 = pd.read_csv(csv_path, sep=',')

dfTestG3=pd.DataFrame();
registros = 0;
band=0;
pos = 0;

for i in range(0,len(testset)):

    paciente = testset.loc[i, 'Paciente']
    registros = 0;
    band= 0; 
    
    for j in range(0,len(G3)):
      
      if (G3.loc[j, 'Paciente'] == paciente):
        
        if (band == 0):
            band=1;
            dfdatosG3.loc[pos, 'PacienteTest'] = paciente;
            dfTestG3.loc[pos, 'PacienteTest'] = paciente;
            registros = registros + 1;
        else:
           registros = registros + 1;

    if (band==1):
      dfdatosG3.loc[pos, 'CantidadRegistrosTest'] = registros;
      dfTestG3.loc[pos, 'CantidadRegistrosTest'] = registros;
      pos = pos +1;

dfdatosG3.to_csv('ResultadosG3.csv')
dfdatosG3

"""# Proceso de registros de pacientes (train y test) G4 76-100 horas

"""

csv_path = '/content/trainset.csv'
trainset = pd.read_csv(csv_path, sep=',')

csv_path = '/content/G4-100Horas.csv'
G4 = pd.read_csv(csv_path, sep=',')

dfdatosG4=pd.DataFrame();
registros = 0;
band=0;
pos = 0;

for i in range(0,len(trainset)):

    paciente = trainset.loc[i, 'Paciente']
    registros = 0;
    band= 0;
    
    for j in range(0,len(G4)):
      
      if (G4.loc[j, 'Paciente'] == paciente):
        
        if (band == 0):
            band=1;
            dfdatosG4.loc[pos, 'PacienteTrain'] = paciente;
            registros = registros + 1;
        else:
           registros = registros + 1;

    if (band == 1):
      dfdatosG4.loc[pos, 'CantidadRegistrosTrain'] = registros; 
      pos = pos +1;

csv_path = '/content/testset.csv'
testset = pd.read_csv(csv_path, sep=',')

csv_path = '/content/G4-100Horas.csv'
G4 = pd.read_csv(csv_path, sep=',')

dfTestG4=pd.DataFrame();
registros = 0;
band=0;
pos = 0;

for i in range(0,len(testset)):

    paciente = testset.loc[i, 'Paciente']
    registros = 0;
    band= 0; 
    
    for j in range(0,len(G4)):
      
      if (G4.loc[j, 'Paciente'] == paciente):
        
        if (band == 0):
            band=1;
            dfdatosG4.loc[pos, 'PacienteTest'] = paciente;
            dfTestG4.loc[pos, 'PacienteTest'] = paciente;
            registros = registros + 1;
        else:
           registros = registros + 1;

    if (band==1):
      dfdatosG4.loc[pos, 'CantidadRegistrosTest'] = registros;
      dfTestG4.loc[pos, 'CantidadRegistrosTest'] = registros;
      pos = pos +1;

dfdatosG4.to_csv('ResultadosG4.csv')
dfdatosG4

"""# Tabla de resultados"""

#Datos M1

#Total pacientes Train
pm1= len(dfdatosG1)
#Total registros pacientes Train
rm1 = dfdatosG1['CantidadRegistrosTrain'].sum()
#Total pacientes Test
ptm1= len(dfTestG1)
#Total registros pacientes Test
rtm1 = dfTestG1['CantidadRegistrosTest'].sum()

#Datos M2

#Total pacientes Train
pm2= len(dfdatosG2)
#Total registros pacientes Train
rm2 = dfdatosG2['CantidadRegistrosTrain'].sum()
#Total pacientes Test
ptm2= len(dfTestG2.PacienteTest)
#Total registros pacientes Test
rtm2 = dfTestG2['CantidadRegistrosTest'].sum()

#Datos M3

#Total pacientes Train
pm3= len(dfdatosG3)
#Total registros pacientes Train
rm3 = dfdatosG3['CantidadRegistrosTrain'].sum()
#Total pacientes Test
ptm3= len(dfTestG3)
#Total registros pacientes Test
rtm3 = dfTestG3['CantidadRegistrosTest'].sum()

#Datos M4

#Total pacientes Train
pm4= len(dfdatosG4)
#Total registros pacientes Train
rm4 = dfdatosG4['CantidadRegistrosTrain'].sum()
#Total pacientes Test
ptm4= len(dfTestG4)
#Total registros pacientes Test
rtm4 = dfTestG4['CantidadRegistrosTest'].sum()

datos = {'PacientesTrain': [ pm1, pm2, pm3, pm4],
         'RegistrosTrain': [ rm1, rm2, rm3, rm4],
         'PacientesTest': [ptm1, ptm2, ptm3, ptm4],
         'RegistrosTest': [ rtm1, rtm2, rtm3, rtm4]}

Resultados = pd.DataFrame(datos, index=['M1', 'M2', 'M3' , 'M4'])
Resultados.to_csv('Resultados.csv')
Resultados

"""# Extracci贸n de los pacientes de entrenamiento y test G1"""

csv_path = '/content/trainset.csv'
trainset = pd.read_csv(csv_path, sep=',')

csv_path = '/content/G1-25Horas.csv'
G1 = pd.read_csv(csv_path, sep=',')

TrainG1=pd.DataFrame();
pos = 0;

for i in range(0,len(trainset)):
  paciente = trainset.loc[i, 'Paciente']

  for j in range(0,len(G1)):
    if (G1.loc[j,'Paciente'] == paciente):

       TrainG1.loc[pos, 'Paciente'] = paciente;
       TrainG1.loc[pos, 'Hora'] = G1.iloc[j]['Hora'];
       TrainG1.loc[pos, 'Bilirubin_total'] = G1.iloc[j]['Bilirubin_total'];
       TrainG1.loc[pos, 'Creatinine'] = G1.iloc[j]['Creatinine'];
       TrainG1.loc[pos, 'MAP'] = G1.iloc[j]['MAP'];
       TrainG1.loc[pos, 'Platelets'] = G1.iloc[j]['Platelets'];
       TrainG1.loc[pos, 'Respiracion'] = G1.iloc[j]['Respiracion'];
       TrainG1.loc[pos, 'HR'] = G1.iloc[j]['HR'];
       TrainG1.loc[pos, 'SepsisLabel'] = G1.iloc[j]['SepsisLabel'];
       TrainG1.loc[pos, 'AST'] = G1.iloc[j]['AST'];
       TrainG1.loc[pos, 'Age'] = G1.iloc[j]['Age'];
       TrainG1.loc[pos, 'Alkalinephos'] = G1.iloc[j]['Alkalinephos'];
       TrainG1.loc[pos, 'BUN'] = G1.iloc[j]['BUN'];
       TrainG1.loc[pos, 'BaseExcess'] = G1.iloc[j]['BaseExcess'];
       TrainG1.loc[pos, 'Bilirubin_direct'] = G1.iloc[j]['Bilirubin_direct'];
       TrainG1.loc[pos, 'Calcium'] = G1.iloc[j]['Calcium'];
       TrainG1.loc[pos, 'Chloride'] = G1.iloc[j]['Chloride'];
       TrainG1.loc[pos, 'DBP'] = G1.iloc[j]['DBP'];
       TrainG1.loc[pos, 'EtCO2'] = G1.iloc[j]['EtCO2'];
       TrainG1.loc[pos, 'FiO2'] = G1.iloc[j]['FiO2'];
       TrainG1.loc[pos, 'Fibrinogen'] = G1.iloc[j]['Fibrinogen'];
       TrainG1.loc[pos, 'Gender'] = G1.iloc[j]['Gender'];
       TrainG1.loc[pos, 'Glucose'] = G1.iloc[j]['Glucose'];
       TrainG1.loc[pos, 'HCO3'] = G1.iloc[j]['HCO3'];
       TrainG1.loc[pos, 'Hct'] = G1.iloc[j]['Hct'];
       TrainG1.loc[pos, 'Hgb'] = G1.iloc[j]['Hgb'];
       TrainG1.loc[pos, 'HospAdmTime'] = G1.iloc[j]['HospAdmTime'];
       TrainG1.loc[pos, 'ICULOS'] = G1.iloc[j]['ICULOS'];
       TrainG1.loc[pos, 'Lactate'] = G1.iloc[j]['Lactate'];
       TrainG1.loc[pos, 'Magnesium'] = G1.iloc[j]['Magnesium'];
       TrainG1.loc[pos, 'O2Sat'] = G1.iloc[j]['O2Sat'];
       TrainG1.loc[pos, 'PTT'] = G1.iloc[j]['PTT'];
       TrainG1.loc[pos, 'PaCO2'] = G1.iloc[j]['PaCO2'];
       TrainG1.loc[pos, 'Phosphate'] = G1.iloc[j]['Phosphate'];
       TrainG1.loc[pos, 'Potassium'] = G1.iloc[j]['Potassium'];
       TrainG1.loc[pos, 'Resp'] = G1.iloc[j]['Resp'];
       TrainG1.loc[pos, 'SBP'] = G1.iloc[j]['SBP'];
       TrainG1.loc[pos, 'SaO2'] = G1.iloc[j]['SaO2'];
       TrainG1.loc[pos, 'Temp'] = G1.iloc[j]['Temp'];
       TrainG1.loc[pos, 'TroponinI'] = G1.iloc[j]['TroponinI'];
       TrainG1.loc[pos, 'Unit1'] = G1.iloc[j]['Unit1'];
       TrainG1.loc[pos, 'Unit2'] = G1.iloc[j]['Unit2'];
       TrainG1.loc[pos, 'WBC'] = G1.iloc[j]['WBC'];
       TrainG1.loc[pos, 'pH'] = G1.iloc[j]['pH'];
       TrainG1.loc[pos, 'Sepsis_SIRS'] = G1.iloc[j]['Sepsis_SIRS'];
       TrainG1.loc[pos, 'Sepsis_SOFA'] = G1.iloc[j]['Sepsis_SOFA'];

       pos=pos+1;

csv_path = '/content/testset.csv'
testset = pd.read_csv(csv_path, sep=',')

csv_path = '/content/G1-25Horas.csv'
G1 = pd.read_csv(csv_path, sep=',')

TestG1=pd.DataFrame();
pos = 0;

for i in range(0,len(testset)):
  paciente = testset.loc[i, 'Paciente']

  for j in range(0,len(G1)):
    if (G1.loc[j,'Paciente'] == paciente):

       TestG1.loc[pos, 'Paciente'] = paciente;
       TestG1.loc[pos, 'Hora'] = G1.iloc[j]['Hora'];
       TestG1.loc[pos, 'Bilirubin_total'] = G1.iloc[j]['Bilirubin_total'];
       TestG1.loc[pos, 'Creatinine'] = G1.iloc[j]['Creatinine'];
       TestG1.loc[pos, 'MAP'] = G1.iloc[j]['MAP'];
       TestG1.loc[pos, 'Platelets'] = G1.iloc[j]['Platelets'];
       TestG1.loc[pos, 'Respiracion'] = G1.iloc[j]['Respiracion'];
       TestG1.loc[pos, 'HR'] = G1.iloc[j]['HR'];
       TestG1.loc[pos, 'SepsisLabel'] = G1.iloc[j]['SepsisLabel'];
       TestG1.loc[pos, 'AST'] = G1.iloc[j]['AST'];
       TestG1.loc[pos, 'Age'] = G1.iloc[j]['Age'];
       TestG1.loc[pos, 'Alkalinephos'] = G1.iloc[j]['Alkalinephos'];
       TestG1.loc[pos, 'BUN'] = G1.iloc[j]['BUN'];
       TestG1.loc[pos, 'BaseExcess'] = G1.iloc[j]['BaseExcess'];
       TestG1.loc[pos, 'Bilirubin_direct'] = G1.iloc[j]['Bilirubin_direct'];
       TestG1.loc[pos, 'Calcium'] = G1.iloc[j]['Calcium'];
       TestG1.loc[pos, 'Chloride'] = G1.iloc[j]['Chloride'];
       TestG1.loc[pos, 'DBP'] = G1.iloc[j]['DBP'];
       TestG1.loc[pos, 'EtCO2'] = G1.iloc[j]['EtCO2'];
       TestG1.loc[pos, 'FiO2'] = G1.iloc[j]['FiO2'];
       TestG1.loc[pos, 'Fibrinogen'] = G1.iloc[j]['Fibrinogen'];
       TestG1.loc[pos, 'Gender'] = G1.iloc[j]['Gender'];
       TestG1.loc[pos, 'Glucose'] = G1.iloc[j]['Glucose'];
       TestG1.loc[pos, 'HCO3'] = G1.iloc[j]['HCO3'];
       TestG1.loc[pos, 'Hct'] = G1.iloc[j]['Hct'];
       TestG1.loc[pos, 'Hgb'] = G1.iloc[j]['Hgb'];
       TestG1.loc[pos, 'HospAdmTime'] = G1.iloc[j]['HospAdmTime'];
       TestG1.loc[pos, 'ICULOS'] = G1.iloc[j]['ICULOS'];
       TestG1.loc[pos, 'Lactate'] = G1.iloc[j]['Lactate'];
       TestG1.loc[pos, 'Magnesium'] = G1.iloc[j]['Magnesium'];
       TestG1.loc[pos, 'O2Sat'] = G1.iloc[j]['O2Sat'];
       TestG1.loc[pos, 'PTT'] = G1.iloc[j]['PTT'];
       TestG1.loc[pos, 'PaCO2'] = G1.iloc[j]['PaCO2'];
       TestG1.loc[pos, 'Phosphate'] = G1.iloc[j]['Phosphate'];
       TestG1.loc[pos, 'Potassium'] = G1.iloc[j]['Potassium'];
       TestG1.loc[pos, 'Resp'] = G1.iloc[j]['Resp'];
       TestG1.loc[pos, 'SBP'] = G1.iloc[j]['SBP'];
       TestG1.loc[pos, 'SaO2'] = G1.iloc[j]['SaO2'];
       TestG1.loc[pos, 'Temp'] = G1.iloc[j]['Temp'];
       TestG1.loc[pos, 'TroponinI'] = G1.iloc[j]['TroponinI'];
       TestG1.loc[pos, 'Unit1'] = G1.iloc[j]['Unit1'];
       TestG1.loc[pos, 'Unit2'] = G1.iloc[j]['Unit2'];
       TestG1.loc[pos, 'WBC'] = G1.iloc[j]['WBC'];
       TestG1.loc[pos, 'pH'] = G1.iloc[j]['pH'];
       TestG1.loc[pos, 'Sepsis_SIRS'] = G1.iloc[j]['Sepsis_SIRS'];
       TestG1.loc[pos, 'Sepsis_SOFA'] = G1.iloc[j]['Sepsis_SOFA'];

       pos=pos+1;

TrainG1.to_csv('TrainG1.csv')
TestG1.to_csv('TestG1.csv')

"""# Extracci贸n de los pacientes de entrenamiento y test G2"""

csv_path = '/content/trainset.csv'
trainset = pd.read_csv(csv_path, sep=',')

csv_path = '/content/G2-50Horas.csv'
G2 = pd.read_csv(csv_path, sep=',')

TrainG2=pd.DataFrame();
pos = 0;

for i in range(0,len(trainset)):
  paciente = trainset.loc[i, 'Paciente']

  for j in range(0,len(G2)):
    if (G2.loc[j,'Paciente'] == paciente):

       TrainG2.loc[pos, 'Paciente'] = paciente;
       TrainG2.loc[pos, 'Hora'] = G2.iloc[j]['Hora'];
       TrainG2.loc[pos, 'Bilirubin_total'] = G2.iloc[j]['Bilirubin_total'];
       TrainG2.loc[pos, 'Creatinine'] = G2.iloc[j]['Creatinine'];
       TrainG2.loc[pos, 'MAP'] = G2.iloc[j]['MAP'];
       TrainG2.loc[pos, 'Platelets'] = G2.iloc[j]['Platelets'];
       TrainG2.loc[pos, 'Respiracion'] = G2.iloc[j]['Respiracion'];
       TrainG2.loc[pos, 'HR'] = G2.iloc[j]['HR'];
       TrainG2.loc[pos, 'SepsisLabel'] = G2.iloc[j]['SepsisLabel'];
       TrainG2.loc[pos, 'AST'] = G2.iloc[j]['AST'];
       TrainG2.loc[pos, 'Age'] = G2.iloc[j]['Age'];
       TrainG2.loc[pos, 'Alkalinephos'] = G2.iloc[j]['Alkalinephos'];
       TrainG2.loc[pos, 'BUN'] = G2.iloc[j]['BUN'];
       TrainG2.loc[pos, 'BaseExcess'] = G2.iloc[j]['BaseExcess'];
       TrainG2.loc[pos, 'Bilirubin_direct'] = G2.iloc[j]['Bilirubin_direct'];
       TrainG2.loc[pos, 'Calcium'] = G2.iloc[j]['Calcium'];
       TrainG2.loc[pos, 'Chloride'] = G2.iloc[j]['Chloride'];
       TrainG2.loc[pos, 'DBP'] = G2.iloc[j]['DBP'];
       TrainG2.loc[pos, 'EtCO2'] = G2.iloc[j]['EtCO2'];
       TrainG2.loc[pos, 'FiO2'] = G2.iloc[j]['FiO2'];
       TrainG2.loc[pos, 'Fibrinogen'] = G2.iloc[j]['Fibrinogen'];
       TrainG2.loc[pos, 'Gender'] = G2.iloc[j]['Gender'];
       TrainG2.loc[pos, 'Glucose'] = G2.iloc[j]['Glucose'];
       TrainG2.loc[pos, 'HCO3'] = G2.iloc[j]['HCO3'];
       TrainG2.loc[pos, 'Hct'] = G2.iloc[j]['Hct'];
       TrainG2.loc[pos, 'Hgb'] = G2.iloc[j]['Hgb'];
       TrainG2.loc[pos, 'HospAdmTime'] = G2.iloc[j]['HospAdmTime'];
       TrainG2.loc[pos, 'ICULOS'] = G2.iloc[j]['ICULOS'];
       TrainG2.loc[pos, 'Lactate'] = G2.iloc[j]['Lactate'];
       TrainG2.loc[pos, 'Magnesium'] = G2.iloc[j]['Magnesium'];
       TrainG2.loc[pos, 'O2Sat'] = G2.iloc[j]['O2Sat'];
       TrainG2.loc[pos, 'PTT'] = G2.iloc[j]['PTT'];
       TrainG2.loc[pos, 'PaCO2'] = G2.iloc[j]['PaCO2'];
       TrainG2.loc[pos, 'Phosphate'] = G2.iloc[j]['Phosphate'];
       TrainG2.loc[pos, 'Potassium'] = G2.iloc[j]['Potassium'];
       TrainG2.loc[pos, 'Resp'] = G2.iloc[j]['Resp'];
       TrainG2.loc[pos, 'SBP'] = G2.iloc[j]['SBP'];
       TrainG2.loc[pos, 'SaO2'] = G2.iloc[j]['SaO2'];
       TrainG2.loc[pos, 'Temp'] = G2.iloc[j]['Temp'];
       TrainG2.loc[pos, 'TroponinI'] = G2.iloc[j]['TroponinI'];
       TrainG2.loc[pos, 'Unit1'] = G2.iloc[j]['Unit1'];
       TrainG2.loc[pos, 'Unit2'] = G2.iloc[j]['Unit2'];
       TrainG2.loc[pos, 'WBC'] = G2.iloc[j]['WBC'];
       TrainG2.loc[pos, 'pH'] = G2.iloc[j]['pH'];
       TrainG2.loc[pos, 'Sepsis_SIRS'] = G1.iloc[j]['Sepsis_SIRS'];
       TrainG2.loc[pos, 'Sepsis_SOFA'] = G1.iloc[j]['Sepsis_SOFA'];

       pos=pos+1;

csv_path = '/content/testset.csv'
testset = pd.read_csv(csv_path, sep=',')

csv_path = '/content/G2-50Horas.csv'
G2 = pd.read_csv(csv_path, sep=',')

TestG2=pd.DataFrame();
pos = 0;

for i in range(0,len(testset)):
  paciente = testset.loc[i, 'Paciente']

  for j in range(0,len(G2)):
    if (G2.loc[j,'Paciente'] == paciente):

       TestG2.loc[pos, 'Paciente'] = paciente;
       TestG2.loc[pos, 'Hora'] = G2.iloc[j]['Hora'];
       TestG2.loc[pos, 'Bilirubin_total'] = G2.iloc[j]['Bilirubin_total'];
       TestG2.loc[pos, 'Creatinine'] = G2.iloc[j]['Creatinine'];
       TestG2.loc[pos, 'MAP'] = G2.iloc[j]['MAP'];
       TestG2.loc[pos, 'Platelets'] = G2.iloc[j]['Platelets'];
       TestG2.loc[pos, 'Respiracion'] = G2.iloc[j]['Respiracion'];
       TestG2.loc[pos, 'HR'] = G2.iloc[j]['HR'];
       TestG2.loc[pos, 'SepsisLabel'] = G2.iloc[j]['SepsisLabel'];
       TestG2.loc[pos, 'AST'] = G2.iloc[j]['AST'];
       TestG2.loc[pos, 'Age'] = G2.iloc[j]['Age'];
       TestG2.loc[pos, 'Alkalinephos'] = G2.iloc[j]['Alkalinephos'];
       TestG2.loc[pos, 'BUN'] = G2.iloc[j]['BUN'];
       TestG2.loc[pos, 'BaseExcess'] = G2.iloc[j]['BaseExcess'];
       TestG2.loc[pos, 'Bilirubin_direct'] = G2.iloc[j]['Bilirubin_direct'];
       TestG2.loc[pos, 'Calcium'] = G2.iloc[j]['Calcium'];
       TestG2.loc[pos, 'Chloride'] = G2.iloc[j]['Chloride'];
       TestG2.loc[pos, 'DBP'] = G2.iloc[j]['DBP'];
       TestG2.loc[pos, 'EtCO2'] = G2.iloc[j]['EtCO2'];
       TestG2.loc[pos, 'FiO2'] = G2.iloc[j]['FiO2'];
       TestG2.loc[pos, 'Fibrinogen'] = G2.iloc[j]['Fibrinogen'];
       TestG2.loc[pos, 'Gender'] = G2.iloc[j]['Gender'];
       TestG2.loc[pos, 'Glucose'] = G2.iloc[j]['Glucose'];
       TestG2.loc[pos, 'HCO3'] = G2.iloc[j]['HCO3'];
       TestG2.loc[pos, 'Hct'] = G2.iloc[j]['Hct'];
       TestG2.loc[pos, 'Hgb'] = G2.iloc[j]['Hgb'];
       TestG2.loc[pos, 'HospAdmTime'] = G2.iloc[j]['HospAdmTime'];
       TestG2.loc[pos, 'ICULOS'] = G2.iloc[j]['ICULOS'];
       TestG2.loc[pos, 'Lactate'] = G2.iloc[j]['Lactate'];
       TestG2.loc[pos, 'Magnesium'] = G2.iloc[j]['Magnesium'];
       TestG2.loc[pos, 'O2Sat'] = G2.iloc[j]['O2Sat'];
       TestG2.loc[pos, 'PTT'] = G2.iloc[j]['PTT'];
       TestG2.loc[pos, 'PaCO2'] = G2.iloc[j]['PaCO2'];
       TestG2.loc[pos, 'Phosphate'] = G2.iloc[j]['Phosphate'];
       TestG2.loc[pos, 'Potassium'] = G2.iloc[j]['Potassium'];
       TestG2.loc[pos, 'Resp'] = G2.iloc[j]['Resp'];
       TestG2.loc[pos, 'SBP'] = G2.iloc[j]['SBP'];
       TestG2.loc[pos, 'SaO2'] = G2.iloc[j]['SaO2'];
       TestG2.loc[pos, 'Temp'] = G2.iloc[j]['Temp'];
       TestG2.loc[pos, 'TroponinI'] = G2.iloc[j]['TroponinI'];
       TestG2.loc[pos, 'Unit1'] = G2.iloc[j]['Unit1'];
       TestG2.loc[pos, 'Unit2'] = G2.iloc[j]['Unit2'];
       TestG2.loc[pos, 'WBC'] = G2.iloc[j]['WBC'];
       TestG2.loc[pos, 'pH'] = G2.iloc[j]['pH'];
       TestG2.loc[pos, 'Sepsis_SIRS'] = G1.iloc[j]['Sepsis_SIRS'];
       TestG2.loc[pos, 'Sepsis_SOFA'] = G1.iloc[j]['Sepsis_SOFA'];

       pos=pos+1;

TrainG2.to_csv('TrainG2.csv')
TestG2.to_csv('TestG2.csv')

"""# Extracci贸n de los pacientes de entrenamiento y test G3"""

csv_path = '/content/trainset.csv'
trainset = pd.read_csv(csv_path, sep=',')

csv_path = '/content/G3-75Horas.csv'
G3 = pd.read_csv(csv_path, sep=',')

TrainG3=pd.DataFrame();
pos = 0;

for i in range(0,len(trainset)):
  paciente = trainset.loc[i, 'Paciente']

  for j in range(0,len(G3)):
    if (G3.loc[j,'Paciente'] == paciente):

       TrainG3.loc[pos, 'Paciente'] = paciente;
       TrainG3.loc[pos, 'Hora'] = G3.iloc[j]['Hora'];
       TrainG3.loc[pos, 'Bilirubin_total'] = G3.iloc[j]['Bilirubin_total'];
       TrainG3.loc[pos, 'Creatinine'] = G3.iloc[j]['Creatinine'];
       TrainG3.loc[pos, 'MAP'] = G3.iloc[j]['MAP'];
       TrainG3.loc[pos, 'Platelets'] = G3.iloc[j]['Platelets'];
       TrainG3.loc[pos, 'Respiracion'] = G3.iloc[j]['Respiracion'];
       TrainG3.loc[pos, 'HR'] = G3.iloc[j]['HR'];
       TrainG3.loc[pos, 'SepsisLabel'] = G3.iloc[j]['SepsisLabel'];
       TrainG3.loc[pos, 'AST'] = G3.iloc[j]['AST'];
       TrainG3.loc[pos, 'Age'] = G3.iloc[j]['Age'];
       TrainG3.loc[pos, 'Alkalinephos'] = G3.iloc[j]['Alkalinephos'];
       TrainG3.loc[pos, 'BUN'] = G3.iloc[j]['BUN'];
       TrainG3.loc[pos, 'BaseExcess'] = G3.iloc[j]['BaseExcess'];
       TrainG3.loc[pos, 'Bilirubin_direct'] = G3.iloc[j]['Bilirubin_direct'];
       TrainG3.loc[pos, 'Calcium'] = G3.iloc[j]['Calcium'];
       TrainG3.loc[pos, 'Chloride'] = G3.iloc[j]['Chloride'];
       TrainG3.loc[pos, 'DBP'] = G3.iloc[j]['DBP'];
       TrainG3.loc[pos, 'EtCO2'] = G3.iloc[j]['EtCO2'];
       TrainG3.loc[pos, 'FiO2'] = G3.iloc[j]['FiO2'];
       TrainG3.loc[pos, 'Fibrinogen'] = G3.iloc[j]['Fibrinogen'];
       TrainG3.loc[pos, 'Gender'] = G3.iloc[j]['Gender'];
       TrainG3.loc[pos, 'Glucose'] = G3.iloc[j]['Glucose'];
       TrainG3.loc[pos, 'HCO3'] = G3.iloc[j]['HCO3'];
       TrainG3.loc[pos, 'Hct'] = G3.iloc[j]['Hct'];
       TrainG3.loc[pos, 'Hgb'] = G3.iloc[j]['Hgb'];
       TrainG3.loc[pos, 'HospAdmTime'] = G3.iloc[j]['HospAdmTime'];
       TrainG3.loc[pos, 'ICULOS'] = G3.iloc[j]['ICULOS'];
       TrainG3.loc[pos, 'Lactate'] = G3.iloc[j]['Lactate'];
       TrainG3.loc[pos, 'Magnesium'] = G3.iloc[j]['Magnesium'];
       TrainG3.loc[pos, 'O2Sat'] = G3.iloc[j]['O2Sat'];
       TrainG3.loc[pos, 'PTT'] = G3.iloc[j]['PTT'];
       TrainG3.loc[pos, 'PaCO2'] = G3.iloc[j]['PaCO2'];
       TrainG3.loc[pos, 'Phosphate'] = G3.iloc[j]['Phosphate'];
       TrainG3.loc[pos, 'Potassium'] = G3.iloc[j]['Potassium'];
       TrainG3.loc[pos, 'Resp'] = G3.iloc[j]['Resp'];
       TrainG3.loc[pos, 'SBP'] = G3.iloc[j]['SBP'];
       TrainG3.loc[pos, 'SaO2'] = G3.iloc[j]['SaO2'];
       TrainG3.loc[pos, 'Temp'] = G3.iloc[j]['Temp'];
       TrainG3.loc[pos, 'TroponinI'] = G3.iloc[j]['TroponinI'];
       TrainG3.loc[pos, 'Unit1'] = G3.iloc[j]['Unit1'];
       TrainG3.loc[pos, 'Unit2'] = G3.iloc[j]['Unit2'];
       TrainG3.loc[pos, 'WBC'] = G3.iloc[j]['WBC'];
       TrainG3.loc[pos, 'pH'] = G3.iloc[j]['pH'];
       TrainG3.loc[pos, 'Sepsis_SIRS'] = G1.iloc[j]['Sepsis_SIRS'];
       TrainG3.loc[pos, 'Sepsis_SOFA'] = G1.iloc[j]['Sepsis_SOFA'];

       pos=pos+1;

csv_path = '/content/testset.csv'
testset = pd.read_csv(csv_path, sep=',')

csv_path = '/content/G3-75Horas.csv'
G3 = pd.read_csv(csv_path, sep=',')

TestG3=pd.DataFrame();
pos = 0;

for i in range(0,len(testset)):
  paciente = testset.loc[i, 'Paciente']

  for j in range(0,len(G3)):
    if (G3.loc[j,'Paciente'] == paciente):

       TestG3.loc[pos, 'Paciente'] = paciente;
       TestG3.loc[pos, 'Hora'] = G3.iloc[j]['Hora'];
       TestG3.loc[pos, 'Bilirubin_total'] = G3.iloc[j]['Bilirubin_total'];
       TestG3.loc[pos, 'Creatinine'] = G3.iloc[j]['Creatinine'];
       TestG3.loc[pos, 'MAP'] = G3.iloc[j]['MAP'];
       TestG3.loc[pos, 'Platelets'] = G3.iloc[j]['Platelets'];
       TestG3.loc[pos, 'Respiracion'] = G3.iloc[j]['Respiracion'];
       TestG3.loc[pos, 'HR'] = G3.iloc[j]['HR'];
       TestG3.loc[pos, 'SepsisLabel'] = G3.iloc[j]['SepsisLabel'];


       TestG3.loc[pos, 'Paciente'] = paciente;
       TestG3.loc[pos, 'Hora'] = G3.iloc[j]['Hora'];
       TestG3.loc[pos, 'Bilirubin_total'] = G3.iloc[j]['Bilirubin_total'];
       TestG3.loc[pos, 'Creatinine'] = G3.iloc[j]['Creatinine'];
       TestG3.loc[pos, 'MAP'] = G3.iloc[j]['MAP'];
       TestG3.loc[pos, 'Platelets'] = G3.iloc[j]['Platelets'];
       TestG3.loc[pos, 'Respiracion'] = G3.iloc[j]['Respiracion'];
       TestG3.loc[pos, 'HR'] = G3.iloc[j]['HR'];
       TestG3.loc[pos, 'SepsisLabel'] = G3.iloc[j]['SepsisLabel'];
       TestG3.loc[pos, 'AST'] = G3.iloc[j]['AST'];
       TestG3.loc[pos, 'Age'] = G3.iloc[j]['Age'];
       TestG3.loc[pos, 'Alkalinephos'] = G3.iloc[j]['Alkalinephos'];
       TestG3.loc[pos, 'BUN'] = G3.iloc[j]['BUN'];
       TestG3.loc[pos, 'BaseExcess'] = G3.iloc[j]['BaseExcess'];
       TestG3.loc[pos, 'Bilirubin_direct'] = G3.iloc[j]['Bilirubin_direct'];
       TestG3.loc[pos, 'Calcium'] = G3.iloc[j]['Calcium'];
       TestG3.loc[pos, 'Chloride'] = G3.iloc[j]['Chloride'];
       TestG3.loc[pos, 'DBP'] = G3.iloc[j]['DBP'];
       TestG3.loc[pos, 'EtCO2'] = G3.iloc[j]['EtCO2'];
       TestG3.loc[pos, 'FiO2'] = G3.iloc[j]['FiO2'];
       TestG3.loc[pos, 'Fibrinogen'] = G3.iloc[j]['Fibrinogen'];
       TestG3.loc[pos, 'Gender'] = G3.iloc[j]['Gender'];
       TestG3.loc[pos, 'Glucose'] = G3.iloc[j]['Glucose'];
       TestG3.loc[pos, 'HCO3'] = G3.iloc[j]['HCO3'];
       TestG3.loc[pos, 'Hct'] = G3.iloc[j]['Hct'];
       TestG3.loc[pos, 'Hgb'] = G3.iloc[j]['Hgb'];
       TestG3.loc[pos, 'HospAdmTime'] = G3.iloc[j]['HospAdmTime'];
       TestG3.loc[pos, 'ICULOS'] = G3.iloc[j]['ICULOS'];
       TestG3.loc[pos, 'Lactate'] = G3.iloc[j]['Lactate'];
       TestG3.loc[pos, 'Magnesium'] = G3.iloc[j]['Magnesium'];
       TestG3.loc[pos, 'O2Sat'] = G3.iloc[j]['O2Sat'];
       TestG3.loc[pos, 'PTT'] = G3.iloc[j]['PTT'];
       TestG3.loc[pos, 'PaCO2'] = G3.iloc[j]['PaCO2'];
       TestG3.loc[pos, 'Phosphate'] = G3.iloc[j]['Phosphate'];
       TestG3.loc[pos, 'Potassium'] = G3.iloc[j]['Potassium'];
       TestG3.loc[pos, 'Resp'] = G3.iloc[j]['Resp'];
       TestG3.loc[pos, 'SBP'] = G3.iloc[j]['SBP'];
       TestG3.loc[pos, 'SaO2'] = G3.iloc[j]['SaO2'];
       TestG3.loc[pos, 'Temp'] = G3.iloc[j]['Temp'];
       TestG3.loc[pos, 'TroponinI'] = G3.iloc[j]['TroponinI'];
       TestG3.loc[pos, 'Unit1'] = G3.iloc[j]['Unit1'];
       TestG3.loc[pos, 'Unit2'] = G3.iloc[j]['Unit2'];
       TestG3.loc[pos, 'WBC'] = G3.iloc[j]['WBC'];
       TestG3.loc[pos, 'pH'] = G3.iloc[j]['pH'];
       TestG3.loc[pos, 'Sepsis_SIRS'] = G1.iloc[j]['Sepsis_SIRS'];
       TestG3.loc[pos, 'Sepsis_SOFA'] = G1.iloc[j]['Sepsis_SOFA'];
       pos=pos+1;

TrainG3.to_csv('TrainG3.csv')
TestG3.to_csv('TestG3.csv')

"""# Extracci贸n de los pacientes de entrenamiento y test G4"""

csv_path = '/content/trainset.csv'
trainset = pd.read_csv(csv_path, sep=',')

csv_path = '/content/G4-100Horas.csv'
G4 = pd.read_csv(csv_path, sep=',')

TrainG4=pd.DataFrame();
pos = 0;

for i in range(0,len(trainset)):
  paciente = trainset.loc[i, 'Paciente']

  for j in range(0,len(G4)):
    if (G4.loc[j,'Paciente'] == paciente):

       TrainG4.loc[pos, 'Paciente'] = paciente;
       TrainG4.loc[pos, 'Hora'] = G4.iloc[j]['Hora'];
       TrainG4.loc[pos, 'Bilirubin_total'] = G4.iloc[j]['Bilirubin_total'];
       TrainG4.loc[pos, 'Creatinine'] = G4.iloc[j]['Creatinine'];
       TrainG4.loc[pos, 'MAP'] = G4.iloc[j]['MAP'];
       TrainG4.loc[pos, 'Platelets'] = G4.iloc[j]['Platelets'];
       TrainG4.loc[pos, 'Respiracion'] = G4.iloc[j]['Respiracion'];
       TrainG4.loc[pos, 'HR'] = G4.iloc[j]['HR'];
       TrainG4.loc[pos, 'SepsisLabel'] = G4.iloc[j]['SepsisLabel'];
       TrainG4.loc[pos, 'AST'] = G4.iloc[j]['AST'];
       TrainG4.loc[pos, 'Age'] = G4.iloc[j]['Age'];
       TrainG4.loc[pos, 'Alkalinephos'] = G4.iloc[j]['Alkalinephos'];
       TrainG4.loc[pos, 'BUN'] = G4.iloc[j]['BUN'];
       TrainG4.loc[pos, 'BaseExcess'] = G4.iloc[j]['BaseExcess'];
       TrainG4.loc[pos, 'Bilirubin_direct'] = G4.iloc[j]['Bilirubin_direct'];
       TrainG4.loc[pos, 'Calcium'] = G4.iloc[j]['Calcium'];
       TrainG4.loc[pos, 'Chloride'] = G4.iloc[j]['Chloride'];
       TrainG4.loc[pos, 'DBP'] = G4.iloc[j]['DBP'];
       TrainG4.loc[pos, 'EtCO2'] = G4.iloc[j]['EtCO2'];
       TrainG4.loc[pos, 'FiO2'] = G4.iloc[j]['FiO2'];
       TrainG4.loc[pos, 'Fibrinogen'] = G4.iloc[j]['Fibrinogen'];
       TrainG4.loc[pos, 'Gender'] = G4.iloc[j]['Gender'];
       TrainG4.loc[pos, 'Glucose'] = G4.iloc[j]['Glucose'];
       TrainG4.loc[pos, 'HCO3'] = G4.iloc[j]['HCO3'];
       TrainG4.loc[pos, 'Hct'] = G4.iloc[j]['Hct'];
       TrainG4.loc[pos, 'Hgb'] = G4.iloc[j]['Hgb'];
       TrainG4.loc[pos, 'HospAdmTime'] = G4.iloc[j]['HospAdmTime'];
       TrainG4.loc[pos, 'ICULOS'] = G4.iloc[j]['ICULOS'];
       TrainG4.loc[pos, 'Lactate'] = G4.iloc[j]['Lactate'];
       TrainG4.loc[pos, 'Magnesium'] = G4.iloc[j]['Magnesium'];
       TrainG4.loc[pos, 'O2Sat'] = G4.iloc[j]['O2Sat'];
       TrainG4.loc[pos, 'PTT'] = G4.iloc[j]['PTT'];
       TrainG4.loc[pos, 'PaCO2'] = G4.iloc[j]['PaCO2'];
       TrainG4.loc[pos, 'Phosphate'] = G4.iloc[j]['Phosphate'];
       TrainG4.loc[pos, 'Potassium'] = G4.iloc[j]['Potassium'];
       TrainG4.loc[pos, 'Resp'] = G4.iloc[j]['Resp'];
       TrainG4.loc[pos, 'SBP'] = G4.iloc[j]['SBP'];
       TrainG4.loc[pos, 'SaO2'] = G4.iloc[j]['SaO2'];
       TrainG4.loc[pos, 'Temp'] = G4.iloc[j]['Temp'];
       TrainG4.loc[pos, 'TroponinI'] = G4.iloc[j]['TroponinI'];
       TrainG4.loc[pos, 'Unit1'] = G4.iloc[j]['Unit1'];
       TrainG4.loc[pos, 'Unit2'] = G4.iloc[j]['Unit2'];
       TrainG4.loc[pos, 'WBC'] = G4.iloc[j]['WBC'];
       TrainG4.loc[pos, 'pH'] = G4.iloc[j]['pH'];
       TrainG4.loc[pos, 'Sepsis_SIRS'] = G1.iloc[j]['Sepsis_SIRS'];
       TrainG4.loc[pos, 'Sepsis_SOFA'] = G1.iloc[j]['Sepsis_SOFA'];

       pos=pos+1;

csv_path = '/content/testset.csv'
testset = pd.read_csv(csv_path, sep=',')

csv_path = '/content/G4-100Horas.csv'
G4 = pd.read_csv(csv_path, sep=',')

TestG4=pd.DataFrame();
pos = 0;

for i in range(0,len(testset)):
  paciente = testset.loc[i, 'Paciente']

  for j in range(0,len(G4)):
    if (G4.loc[j,'Paciente'] == paciente):

       TestG4.loc[pos, 'Paciente'] = paciente;
       TestG4.loc[pos, 'Hora'] = G4.iloc[j]['Hora'];
       TestG4.loc[pos, 'Bilirubin_total'] = G4.iloc[j]['Bilirubin_total'];
       TestG4.loc[pos, 'Creatinine'] = G4.iloc[j]['Creatinine'];
       TestG4.loc[pos, 'MAP'] = G4.iloc[j]['MAP'];
       TestG4.loc[pos, 'Platelets'] = G4.iloc[j]['Platelets'];
       TestG4.loc[pos, 'Respiracion'] = G4.iloc[j]['Respiracion'];
       TestG4.loc[pos, 'HR'] = G4.iloc[j]['HR'];
       TestG4.loc[pos, 'SepsisLabel'] = G4.iloc[j]['SepsisLabel'];
      
       TestG4.loc[pos, 'Paciente'] = paciente;
       TestG4.loc[pos, 'Hora'] = G4.iloc[j]['Hora'];
       TestG4.loc[pos, 'Bilirubin_total'] = G4.iloc[j]['Bilirubin_total'];
       TestG4.loc[pos, 'Creatinine'] = G4.iloc[j]['Creatinine'];
       TestG4.loc[pos, 'MAP'] = G4.iloc[j]['MAP'];
       TestG4.loc[pos, 'Platelets'] = G4.iloc[j]['Platelets'];
       TestG4.loc[pos, 'Respiracion'] = G4.iloc[j]['Respiracion'];
       TestG4.loc[pos, 'HR'] = G4.iloc[j]['HR'];
       TestG4.loc[pos, 'SepsisLabel'] = G4.iloc[j]['SepsisLabel'];
       TestG4.loc[pos, 'AST'] = G4.iloc[j]['AST'];
       TestG4.loc[pos, 'Age'] = G4.iloc[j]['Age'];
       TestG4.loc[pos, 'Alkalinephos'] = G4.iloc[j]['Alkalinephos'];
       TestG4.loc[pos, 'BUN'] = G4.iloc[j]['BUN'];
       TestG4.loc[pos, 'BaseExcess'] = G4.iloc[j]['BaseExcess'];
       TestG4.loc[pos, 'Bilirubin_direct'] = G4.iloc[j]['Bilirubin_direct'];
       TestG4.loc[pos, 'Calcium'] = G4.iloc[j]['Calcium'];
       TestG4.loc[pos, 'Chloride'] = G4.iloc[j]['Chloride'];
       TestG4.loc[pos, 'DBP'] = G4.iloc[j]['DBP'];
       TestG4.loc[pos, 'EtCO2'] = G4.iloc[j]['EtCO2'];
       TestG4.loc[pos, 'FiO2'] = G4.iloc[j]['FiO2'];
       TestG4.loc[pos, 'Fibrinogen'] = G4.iloc[j]['Fibrinogen'];
       TestG4.loc[pos, 'Gender'] = G4.iloc[j]['Gender'];
       TestG4.loc[pos, 'Glucose'] = G4.iloc[j]['Glucose'];
       TestG4.loc[pos, 'HCO3'] = G4.iloc[j]['HCO3'];
       TestG4.loc[pos, 'Hct'] = G4.iloc[j]['Hct'];
       TestG4.loc[pos, 'Hgb'] = G4.iloc[j]['Hgb'];
       TestG4.loc[pos, 'HospAdmTime'] = G4.iloc[j]['HospAdmTime'];
       TestG4.loc[pos, 'ICULOS'] = G4.iloc[j]['ICULOS'];
       TestG4.loc[pos, 'Lactate'] = G4.iloc[j]['Lactate'];
       TestG4.loc[pos, 'Magnesium'] = G4.iloc[j]['Magnesium'];
       TestG4.loc[pos, 'O2Sat'] = G4.iloc[j]['O2Sat'];
       TestG4.loc[pos, 'PTT'] = G4.iloc[j]['PTT'];
       TestG4.loc[pos, 'PaCO2'] = G4.iloc[j]['PaCO2'];
       TestG4.loc[pos, 'Phosphate'] = G4.iloc[j]['Phosphate'];
       TestG4.loc[pos, 'Potassium'] = G4.iloc[j]['Potassium'];
       TestG4.loc[pos, 'Resp'] = G4.iloc[j]['Resp'];
       TestG4.loc[pos, 'SBP'] = G4.iloc[j]['SBP'];
       TestG4.loc[pos, 'SaO2'] = G4.iloc[j]['SaO2'];
       TestG4.loc[pos, 'Temp'] = G4.iloc[j]['Temp'];
       TestG4.loc[pos, 'TroponinI'] = G4.iloc[j]['TroponinI'];
       TestG4.loc[pos, 'Unit1'] = G4.iloc[j]['Unit1'];
       TestG4.loc[pos, 'Unit2'] = G4.iloc[j]['Unit2'];
       TestG4.loc[pos, 'WBC'] = G4.iloc[j]['WBC'];
       TestG4.loc[pos, 'pH'] = G4.iloc[j]['pH'];
       TestG4.loc[pos, 'Sepsis_SIRS'] = G1.iloc[j]['Sepsis_SIRS'];
       TestG4.loc[pos, 'Sepsis_SOFA'] = G1.iloc[j]['Sepsis_SOFA'];



       pos=pos+1;

TrainG4.to_csv('TrainG4.csv')
TestG4.to_csv('TestG4.csv')

"""# Extracci贸n de datos de Train y Test completos"""

csv_path = '/content/trainset.csv'
trainset = pd.read_csv(csv_path, sep=',')

csv_path = '/content/PC120-220.csv'
data = pd.read_csv(csv_path, sep=',')

TrainCompleto=pd.DataFrame();
pos = 0;

for i in range(0,len(trainset)):
  paciente = trainset.loc[i, 'Paciente']

  for j in range(0,len(data)):
    if (data.loc[j,'Paciente'] == paciente):

       TrainCompleto.loc[pos, 'Paciente'] = paciente;
       TrainCompleto.loc[pos, 'Hora'] = data.iloc[j]['Hora'];
       TrainCompleto.loc[pos, 'Bilirubin_total'] = data.iloc[j]['Bilirubin_total'];
       TrainCompleto.loc[pos, 'Creatinine'] = data.iloc[j]['Creatinine'];
       TrainCompleto.loc[pos, 'MAP'] = data.iloc[j]['MAP'];
       TrainCompleto.loc[pos, 'Platelets'] = data.iloc[j]['Platelets'];
       TrainCompleto.loc[pos, 'Respiracion'] = data.iloc[j]['Respiracion'];
       TrainCompleto.loc[pos, 'HR'] = data.iloc[j]['HR'];
       TrainCompleto.loc[pos, 'SepsisLabel'] = data.iloc[j]['SepsisLabel'];
       TrainCompleto.loc[pos, 'AST'] = data.iloc[j]['AST'];
       TrainCompleto.loc[pos, 'Age'] = data.iloc[j]['Age'];
       TrainCompleto.loc[pos, 'Alkalinephos'] = data.iloc[j]['Alkalinephos'];
       TrainCompleto.loc[pos, 'BUN'] = data.iloc[j]['BUN'];
       TrainCompleto.loc[pos, 'BaseExcess'] = data.iloc[j]['BaseExcess'];
       TrainCompleto.loc[pos, 'Bilirubin_direct'] = data.iloc[j]['Bilirubin_direct'];
       TrainCompleto.loc[pos, 'Calcium'] = data.iloc[j]['Calcium'];
       TrainCompleto.loc[pos, 'Chloride'] = data.iloc[j]['Chloride'];
       TrainCompleto.loc[pos, 'DBP'] = data.iloc[j]['DBP'];
       TrainCompleto.loc[pos, 'EtCO2'] = data.iloc[j]['EtCO2'];
       TrainCompleto.loc[pos, 'FiO2'] = data.iloc[j]['FiO2'];
       TrainCompleto.loc[pos, 'Fibrinogen'] = data.iloc[j]['Fibrinogen'];
       TrainCompleto.loc[pos, 'Gender'] = data.iloc[j]['Gender'];
       TrainCompleto.loc[pos, 'Glucose'] = data.iloc[j]['Glucose'];
       TrainCompleto.loc[pos, 'HCO3'] = data.iloc[j]['HCO3'];
       TrainCompleto.loc[pos, 'Hct'] = data.iloc[j]['Hct'];
       TrainCompleto.loc[pos, 'Hgb'] = data.iloc[j]['Hgb'];
       TrainCompleto.loc[pos, 'HospAdmTime'] = data.iloc[j]['HospAdmTime'];
       TrainCompleto.loc[pos, 'ICULOS'] = data.iloc[j]['ICULOS'];
       TrainCompleto.loc[pos, 'Lactate'] = data.iloc[j]['Lactate'];
       TrainCompleto.loc[pos, 'Magnesium'] = data.iloc[j]['Magnesium'];
       TrainCompleto.loc[pos, 'O2Sat'] = data.iloc[j]['O2Sat'];
       TrainCompleto.loc[pos, 'PTT'] = data.iloc[j]['PTT'];
       TrainCompleto.loc[pos, 'PaCO2'] = data.iloc[j]['PaCO2'];
       TrainCompleto.loc[pos, 'Phosphate'] = data.iloc[j]['Phosphate'];
       TrainCompleto.loc[pos, 'Potassium'] = data.iloc[j]['Potassium'];
       TrainCompleto.loc[pos, 'Resp'] = data.iloc[j]['Resp'];
       TrainCompleto.loc[pos, 'SBP'] = data.iloc[j]['SBP'];
       TrainCompleto.loc[pos, 'SaO2'] = data.iloc[j]['SaO2'];
       TrainCompleto.loc[pos, 'Temp'] = data.iloc[j]['Temp'];
       TrainCompleto.loc[pos, 'TroponinI'] = data.iloc[j]['TroponinI'];
       TrainCompleto.loc[pos, 'Unit1'] = data.iloc[j]['Unit1'];
       TrainCompleto.loc[pos, 'Unit2'] = data.iloc[j]['Unit2'];
       TrainCompleto.loc[pos, 'WBC'] = data.iloc[j]['WBC'];
       TrainCompleto.loc[pos, 'pH'] = data.iloc[j]['pH'];
       TrainCompleto.loc[pos, 'Sepsis_SIRS'] = data.iloc[j]['Sepsis_SIRS'];
       TrainCompleto.loc[pos, 'Sepsis_SOFA'] = data.iloc[j]['Sepsis_SOFA'];

       pos=pos+1;

csv_path = '/content/testset.csv'
testset = pd.read_csv(csv_path, sep=',')

csv_path = '/content/PC120-220.csv'
data = pd.read_csv(csv_path, sep=',')

TestCompleto=pd.DataFrame();
pos = 0;

for i in range(0,len(testset)):
  paciente = testset.loc[i, 'Paciente']

  for j in range(0,len(data)):
    if (data.loc[j,'Paciente'] == paciente):

       TestCompleto.loc[pos, 'Paciente'] = paciente;
       TestCompleto.loc[pos, 'Hora'] = data.iloc[j]['Hora'];
       TestCompleto.loc[pos, 'Bilirubin_total'] = data.iloc[j]['Bilirubin_total'];
       TestCompleto.loc[pos, 'Creatinine'] = data.iloc[j]['Creatinine'];
       TestCompleto.loc[pos, 'MAP'] = data.iloc[j]['MAP'];
       TestCompleto.loc[pos, 'Platelets'] = data.iloc[j]['Platelets'];
       TestCompleto.loc[pos, 'Respiracion'] = data.iloc[j]['Respiracion'];
       TestCompleto.loc[pos, 'HR'] = data.iloc[j]['HR'];
       TestCompleto.loc[pos, 'SepsisLabel'] = data.iloc[j]['SepsisLabel'];
       TestCompleto.loc[pos, 'AST'] = data.iloc[j]['AST'];
       TestCompleto.loc[pos, 'Age'] = data.iloc[j]['Age'];
       TestCompleto.loc[pos, 'Alkalinephos'] = data.iloc[j]['Alkalinephos'];
       TestCompleto.loc[pos, 'BUN'] = data.iloc[j]['BUN'];
       TestCompleto.loc[pos, 'BaseExcess'] = data.iloc[j]['BaseExcess'];
       TestCompleto.loc[pos, 'Bilirubin_direct'] = data.iloc[j]['Bilirubin_direct'];
       TestCompleto.loc[pos, 'Calcium'] = data.iloc[j]['Calcium'];
       TestCompleto.loc[pos, 'Chloride'] = data.iloc[j]['Chloride'];
       TestCompleto.loc[pos, 'DBP'] = data.iloc[j]['DBP'];
       TestCompleto.loc[pos, 'EtCO2'] = data.iloc[j]['EtCO2'];
       TestCompleto.loc[pos, 'FiO2'] = data.iloc[j]['FiO2'];
       TestCompleto.loc[pos, 'Fibrinogen'] = data.iloc[j]['Fibrinogen'];
       TestCompleto.loc[pos, 'Gender'] = data.iloc[j]['Gender'];
       TestCompleto.loc[pos, 'Glucose'] = data.iloc[j]['Glucose'];
       TestCompleto.loc[pos, 'HCO3'] = data.iloc[j]['HCO3'];
       TestCompleto.loc[pos, 'Hct'] = data.iloc[j]['Hct'];
       TestCompleto.loc[pos, 'Hgb'] = data.iloc[j]['Hgb'];
       TestCompleto.loc[pos, 'HospAdmTime'] = data.iloc[j]['HospAdmTime'];
       TestCompleto.loc[pos, 'ICULOS'] = data.iloc[j]['ICULOS'];
       TestCompleto.loc[pos, 'Lactate'] = data.iloc[j]['Lactate'];
       TestCompleto.loc[pos, 'Magnesium'] = data.iloc[j]['Magnesium'];
       TestCompleto.loc[pos, 'O2Sat'] = data.iloc[j]['O2Sat'];
       TestCompleto.loc[pos, 'PTT'] = data.iloc[j]['PTT'];
       TestCompleto.loc[pos, 'PaCO2'] = data.iloc[j]['PaCO2'];
       TestCompleto.loc[pos, 'Phosphate'] = data.iloc[j]['Phosphate'];
       TestCompleto.loc[pos, 'Potassium'] = data.iloc[j]['Potassium'];
       TestCompleto.loc[pos, 'Resp'] = data.iloc[j]['Resp'];
       TestCompleto.loc[pos, 'SBP'] = data.iloc[j]['SBP'];
       TestCompleto.loc[pos, 'SaO2'] = data.iloc[j]['SaO2'];
       TestCompleto.loc[pos, 'Temp'] = data.iloc[j]['Temp'];
       TestCompleto.loc[pos, 'TroponinI'] = data.iloc[j]['TroponinI'];
       TestCompleto.loc[pos, 'Unit1'] = data.iloc[j]['Unit1'];
       TestCompleto.loc[pos, 'Unit2'] = data.iloc[j]['Unit2'];
       TestCompleto.loc[pos, 'WBC'] = data.iloc[j]['WBC'];
       TestCompleto.loc[pos, 'pH'] = data.iloc[j]['pH'];
       TestCompleto.loc[pos, 'Sepsis_SIRS'] = data.iloc[j]['Sepsis_SIRS'];
       TestCompleto.loc[pos, 'Sepsis_SOFA'] = data.iloc[j]['Sepsis_SOFA'];

       pos=pos+1;

TrainCompleto.to_csv('TrainCompleto.csv')
TestCompleto.to_csv('TestCompleto.csv')

"""# Modelo Regresi贸n logistica Prueba"""

# Se carga la data seleccionada para el estudio
csv_path = '/content/G1-25Horas.csv'
G1 = pd.read_csv(csv_path, sep=',')

G1.Respiracion = G1.Respiracion.replace(["No valido"], -1)
G1.astype({'Respiracion':'float64'}).dtypes

# Se escogen la variables en X que se van a verificar para el analisis, y en y para el atributo que queremos identificar
X = (G1[["Bilirubin_total","Creatinine","MAP","Platelets","Respiracion"]])
y = (G1["Sepsis_SOFA"])

#Divisi贸n del dataset con split entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=0)

# Se utiliza un modelo de regresi贸n logistica
model = LogisticRegression(max_iter=5000)
# Se acciona el modelo
model.fit(X_train,y_train)

y_test

# Se realiza la predicci贸n
y_pred = model.predict(X_test)
y_pred

# Score de predicci贸n
model.score(X_test, y_test)

puntaje = f1_score(y_test, y_pred)
print(puntaje)

#Matriz de Confusi贸n
cm= confusion_matrix(y_test, y_pred)
cm

plot_confusion_matrix(conf_mat=cm, figsize=(4,4), show_normed= False)
plt.tight_layout()

"""# Random Forest Prueba"""

# Se carga la data seleccionada para el estudio
csv_path = '/content/G1-25Horas.csv'
G1 = pd.read_csv(csv_path, sep=',')

G1.Respiracion = G1.Respiracion.replace(["No valido"], -1)
G1.astype({'Respiracion':'float64'}).dtypes

# Se escogen la variables en X que se van a verificar para el analisis, y en y para el atributo que queremos identificar
X = (G1[["Bilirubin_total","Creatinine","MAP","Platelets","Respiracion"]])
y = (G1["Sepsis_SOFA"])

#Divisi贸n del dataset con split entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X,y, random_state=0)

# Creaamos el modelo de Bosques Aleatorios (y configuramos el n煤mero de estimadores (谩rboles de decisi贸n))
BA_model = RandomForestClassifier(n_estimators = 19, random_state = 2016,min_samples_leaf = 8,)

BA_model.fit(X_train, y_train)

# Accuracy promedio
BA_model.score(X_test, y_test)

puntaje = f1_score(y_test, y_pred)
print(puntaje)

# Predicci贸n del modelo usando los datos de prueba
y_pred = BA_model.predict(X_test)
matriz = confusion_matrix(y_test,y_pred)

plot_confusion_matrix(conf_mat=matriz, figsize=(6,6), show_normed=False)
plt.tight_layout()

"""# Cambio pacientes completos 120 a 220 Horas"""

csv_path = '/content/PC120-220.csv'
Pacientes = pd.read_csv(csv_path, sep=',')

PC120_220C= Pacientes[['Paciente','Hora', 'Bilirubin_total', 'Creatinine', 'MAP', 'Platelets', 'Respiracion',  'HR','SepsisLabel','AST','Age','Alkalinephos','BUN','BaseExcess','Bilirubin_direct','Calcium','Chloride','DBP',
  'EtCO2','FiO2','Fibrinogen','Gender','Glucose','HCO3','Hct','Hgb','HospAdmTime','ICULOS','Lactate','Magnesium','O2Sat','PTT','PaCO2','Phosphate','Potassium',
  'Resp' ,'SBP','SaO2','Temp','TroponinI','Unit1','Unit2','WBC','pH','Sepsis_SIRS','Sepsis_SOFA' ]].copy()

PC120_220C