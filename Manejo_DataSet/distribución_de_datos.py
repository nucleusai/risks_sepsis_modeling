# -*- coding: utf-8 -*-
"""Distribución_de_datos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gs1HaVjFH7j31xDTqvIoYaFpSvDEcDI6

## Librerias
"""

import numpy as np
import matplotlib.pyplot as plt
import math
import seaborn as sn
import pandas as pd
from math import e
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn import linear_model
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import  accuracy_score
from sklearn.metrics import roc_auc_score
from sklearn.metrics import  roc_curve
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
from sklearn.ensemble import RandomForestClassifier
from sklearn import preprocessing
from sklearn.model_selection import StratifiedShuffleSplit

"""# Dataset entregado por el CDA creado en mongodb"""

csv_path = '/content/NewDataCompletSepsisMongo.csv'
datos = pd.read_csv(csv_path, sep=',')
datos

"""# Reducción de Horas (120 - 220) (Función)"""

bins = [-1, 119, 220,400]
rango= ["1","2","3"]
datos["HoraG"] = pd.cut(datos["Hora"], bins, labels= rango)
GSepsis = datos.copy()
  
GSepsis = GSepsis.drop(GSepsis[GSepsis['HoraG']== '1'].index)
GSepsis = GSepsis.drop(GSepsis[GSepsis['HoraG']== '3'].index)
GSepsis.to_csv('NewDataHoraCompletSepsisMongo.csv')

csv_path = '/content/NewDataHoraCompletSepsisMongo.csv'
GSepsis = pd.read_csv(csv_path, sep=',')
GSepsis

GSepsis

"""# Conteo y agrupación (Agrupación en binarios por registro)

De un paciente que tiene 100 registros  
se etiquetara SepLabel - SepSirs - SepSofa 
Si almenos un registro repota SeLabel 
Si almenos un registro repota SeLabel -> 1
Si almenos un registro repota SeSisrs -> 1
Si almenos un registro repota SeSofa -> 1

Verificar los registros de cada paciente para poder agruparlo y dar resultado con el sistema de binarios 

|IDpaciente| SeLabel | SeSisrs | SeSofa | \
|    1     |    0    |    0    |    0   |  = 0 \
|    2     |    0    |    0    |    1   |  = 1 \
|    3     |    0    |    1    |    0   |  = 2 \
|    4     |    0    |    1    |    1   |  = 3 \
|    5     |    1    |    0    |    0   |  = 4 \
|    6     |    1    |    0    |    1   |  = 5 \
|    7     |    1    |    1    |    0   |  = 6 \
|    8     |    1    |    1    |    1   |  = 7
"""

g0 = 0
g1 = 0
g2 = 0
g3 = 0
g4 = 0
g5 = 0
g6 = 0
g7 = 0

for i in range(0,len(GSepsis)):
  
  if (GSepsis.loc[i, 'SepsisLabel'] == 0) and (GSepsis.loc[i, 'Sepsis_SIRS'] == 0) and (GSepsis.loc[i, 'Sepsis_SOFA'] == 0):
      GSepsis.loc[i, 'GSepsisBin'] = '0';
  else:
    
    if (GSepsis.loc[i, 'SepsisLabel'] == 0) and (GSepsis.loc[i, 'Sepsis_SIRS'] == 0) and (GSepsis.loc[i, 'Sepsis_SOFA'] == 1):
        GSepsis.loc[i, 'GSepsisBin'] = '1';
    else:
      
      if (GSepsis.loc[i, 'SepsisLabel'] == 0) and (GSepsis.loc[i, 'Sepsis_SIRS'] == 1) and (GSepsis.loc[i, 'Sepsis_SOFA'] == 0):
          GSepsis.loc[i, 'GSepsisBin'] = '2';
      else:
        
        if (GSepsis.loc[i, 'SepsisLabel'] == 0) and (GSepsis.loc[i, 'Sepsis_SIRS'] == 1) and (GSepsis.loc[i, 'Sepsis_SOFA'] == 1):
            GSepsis.loc[i, 'GSepsisBin'] = '3';
        else:
          
          if (GSepsis.loc[i, 'SepsisLabel'] == 1) and (GSepsis.loc[i, 'Sepsis_SIRS'] == 0) and (GSepsis.loc[i, 'Sepsis_SOFA'] == 0):
              GSepsis.loc[i, 'GSepsisBin'] = '4';
          else:
            
            if (GSepsis.loc[i, 'SepsisLabel'] == 1) and (GSepsis.loc[i, 'Sepsis_SIRS'] == 0) and (GSepsis.loc[i, 'Sepsis_SOFA'] == 1):
                GSepsis.loc[i, 'GSepsisBin'] = '5';
            else:
              
              if (GSepsis.loc[i, 'SepsisLabel'] == 1) and (GSepsis.loc[i, 'Sepsis_SIRS'] == 1) and (GSepsis.loc[i, 'Sepsis_SOFA'] == 0):
                  GSepsis.loc[i, 'GSepsisBin'] = '6';
              else:
                
                if (GSepsis.loc[i, 'SepsisLabel'] == 1) and (GSepsis.loc[i, 'Sepsis_SIRS'] == 1) and (GSepsis.loc[i, 'Sepsis_SOFA'] == 1):
                    GSepsis.loc[i, 'GSepsisBin'] = '7';

for i in range(0,len(GSepsis)):
  
  if (GSepsis.loc[i, 'GSepsisBin'] == '0'):
      g0 = g0 + 1;
  else:
    
    if (GSepsis.loc[i, 'GSepsisBin'] == '1'):
        g1 = g1 + 1;
    else:
      
      if (GSepsis.loc[i, 'GSepsisBin'] == '2'):
          g2 = g2 + 1;
      else:
        
        if (GSepsis.loc[i, 'GSepsisBin'] == '3'):
            g3 = g3 + 1;
        else:
          
          if (GSepsis.loc[i, 'GSepsisBin'] == '4'):
              g4 = g4 + 1;
          else:
            
            if (GSepsis.loc[i, 'GSepsisBin'] == '5'):
                g5 = g5 + 1;
            else:
              
              if (GSepsis.loc[i, 'GSepsisBin'] == '6'):
                  g6 = g6 + 1;
              else:
                
                if (GSepsis.loc[i, 'GSepsisBin'] == '7'):
                    g7 = g7 + 1;
        
columna = ['G0', 'G1','G2', 'G3','G4', 'G5','G6', 'G7'] 
valores = [g0,g1,g2,g3,g4,g5,g6,g7 ]
indice =['GSepsisBin']
  
grupo = { 'G0': [g0], 'G1': [g1], 'G2': [g2], 'G3': [g3], 'G4': [g4], 'G5': [g5], 'G6': [g6], 'G7': [g7] }
dfgrupos = pd.DataFrame(data=grupo, index= indice)

dfgrupos # Cantidad total del dataset separado en los grupos creados

# G0 = Paciente sin sepsis
# G1 = Paciente con SEPSIS-LABEL
# G2 = Paciente con SEPSIS-SIRS
# G3 = Paciente con SEPSIS-SOFA
# G4 = Paciente con SEPSIS-LABEL y SEPSIS-SIRS
# G5 = Paciente con SEPSIS-LABEL y SEPSIS-SOFA
# G6 = Paciente con SEPSIS-SIRS y SEPSIS-SOFA
# G7 = Paciente con SEPSIS-LABEL - SEPSIS-SIRS - SEPSIS-SOFA

GSepsis

PSepsisBinRegistro = GSepsis[['Paciente', 'SepsisLabel', 'Sepsis_SIRS', 'Sepsis_SOFA', 'GSepsisBin']]
PSepsisBinRegistro

PSepsisBinRegistro.groupby(['Paciente', 'GSepsisBin']).size().reset_index(name='Cantidad')

"""# Conteo y agrupación (Agrupación en binarios por paciente)

|IDpaciente| SeLabel | SeSisrs | SeSofa | \
|    1     |    0    |    0    |    0   |  = 0 \
|    2     |    0    |    0    |    1   |  = 1 \
|    3     |    0    |    1    |    0   |  = 2 \
|    4     |    0    |    1    |    1   |  = 3 \
|    5     |    1    |    0    |    0   |  = 4 \
|    6     |    1    |    0    |    1   |  = 5 \
|    7     |    1    |    1    |    0   |  = 6 \
|    8     |    1    |    1    |    1   |  = 7
"""

PSepsisBinPaciente = PSepsisBinRegistro[['Paciente']].copy()
PSepsisBinPaciente = PSepsisBinPaciente.drop_duplicates(subset=['Paciente'])

PSepsisBinPaciente.to_csv('PSepsisBinPaciente.csv')

csv_path = '/content/PSepsisBinPaciente.csv'
PSepsisBinPaciente = pd.read_csv(csv_path, sep=',')
PSepsisBinPaciente
PSepsisBinPaciente.rename({"Unnamed: 0":"a"}, axis="columns", inplace=True)
PSepsisBinPaciente.drop(["a"], axis=1, inplace=True)

PSepsisBinPaciente

for i in range(0,len(PSepsisBinPaciente)):

  paciente = PSepsisBinPaciente.loc[i, 'Paciente']
  PSepsisBinPaciente.loc[i, 'SepsisLabel'] = 0;
  PSepsisBinPaciente.loc[i, 'Sepsis_SIRS'] = 0;
  PSepsisBinPaciente.loc[i, 'Sepsis_SOFA'] = 0;
  DFFOR = PSepsisBinRegistro.loc[PSepsisBinRegistro.loc[:, 'Paciente'] == paciente]
  DFFOR = DFFOR.reset_index()

  for j in range(0,len(DFFOR)):

    if (DFFOR.loc[j, 'SepsisLabel'] == 1):
        PSepsisBinPaciente.loc[i, 'SepsisLabel'] = 1;

    if (DFFOR.loc[j, 'Sepsis_SIRS'] == 1):
        PSepsisBinPaciente.loc[i, 'Sepsis_SIRS'] = 1;

    if (DFFOR.loc[j, 'Sepsis_SOFA'] == 1):
        PSepsisBinPaciente.loc[i, 'Sepsis_SOFA'] = 1;


PSepsisBinPaciente

g0 = 0
g1 = 0
g2 = 0
g3 = 0
g4 = 0
g5 = 0
g6 = 0
g7 = 0

for i in range(0,len(PSepsisBinPaciente)):
  
  if (PSepsisBinPaciente.loc[i, 'SepsisLabel'] == 0) and (PSepsisBinPaciente.loc[i, 'Sepsis_SIRS'] == 0) and (PSepsisBinPaciente.loc[i, 'Sepsis_SOFA'] == 0):
      PSepsisBinPaciente.loc[i, 'GSepsisBin'] = '0';
  else:
    
    if (PSepsisBinPaciente.loc[i, 'SepsisLabel'] == 0) and (PSepsisBinPaciente.loc[i, 'Sepsis_SIRS'] == 0) and (PSepsisBinPaciente.loc[i, 'Sepsis_SOFA'] == 1):
        PSepsisBinPaciente.loc[i, 'GSepsisBin'] = '1';
    else:
      
      if (PSepsisBinPaciente.loc[i, 'SepsisLabel'] == 0) and (PSepsisBinPaciente.loc[i, 'Sepsis_SIRS'] == 1) and (PSepsisBinPaciente.loc[i, 'Sepsis_SOFA'] == 0):
          PSepsisBinPaciente.loc[i, 'GSepsisBin'] = '2';
      else:
        
        if (PSepsisBinPaciente.loc[i, 'SepsisLabel'] == 0) and (PSepsisBinPaciente.loc[i, 'Sepsis_SIRS'] == 1) and (PSepsisBinPaciente.loc[i, 'Sepsis_SOFA'] == 1):
            PSepsisBinPaciente.loc[i, 'GSepsisBin'] = '3';
        else:
          
          if (PSepsisBinPaciente.loc[i, 'SepsisLabel'] == 1) and (PSepsisBinPaciente.loc[i, 'Sepsis_SIRS'] == 0) and (PSepsisBinPaciente.loc[i, 'Sepsis_SOFA'] == 0):
              PSepsisBinPaciente.loc[i, 'GSepsisBin'] = '4';
          else:
            
            if (PSepsisBinPaciente.loc[i, 'SepsisLabel'] == 1) and (PSepsisBinPaciente.loc[i, 'Sepsis_SIRS'] == 0) and (PSepsisBinPaciente.loc[i, 'Sepsis_SOFA'] == 1):
                PSepsisBinPaciente.loc[i, 'GSepsisBin'] = '5';
            else:
              
              if (PSepsisBinPaciente.loc[i, 'SepsisLabel'] == 1) and (PSepsisBinPaciente.loc[i, 'Sepsis_SIRS'] == 1) and (PSepsisBinPaciente.loc[i, 'Sepsis_SOFA'] == 0):
                  PSepsisBinPaciente.loc[i, 'GSepsisBin'] = '6';
              else:
                
                if (PSepsisBinPaciente.loc[i, 'SepsisLabel'] == 1) and (PSepsisBinPaciente.loc[i, 'Sepsis_SIRS'] == 1) and (PSepsisBinPaciente.loc[i, 'Sepsis_SOFA'] == 1):
                    PSepsisBinPaciente.loc[i, 'GSepsisBin'] = '7';

for i in range(0,len(PSepsisBinPaciente)):
  
  if (PSepsisBinPaciente.loc[i, 'GSepsisBin'] == '0'):
      g0 = g0 + 1;
  else:
    
    if (PSepsisBinPaciente.loc[i, 'GSepsisBin'] == '1'):
        g1 = g1 + 1;
    else:
      
      if (PSepsisBinPaciente.loc[i, 'GSepsisBin'] == '2'):
          g2 = g2 + 1;
      else:
        
        if (PSepsisBinPaciente.loc[i, 'GSepsisBin'] == '3'):
            g3 = g3 + 1;
        else:
          
          if (PSepsisBinPaciente.loc[i, 'GSepsisBin'] == '4'):
              g4 = g4 + 1;
          else:
            
            if (PSepsisBinPaciente.loc[i, 'GSepsisBin'] == '5'):
                g5 = g5 + 1;
            else:
              
              if (PSepsisBinPaciente.loc[i, 'GSepsisBin'] == '6'):
                  g6 = g6 + 1;
              else:
                
                if (PSepsisBinPaciente.loc[i, 'GSepsisBin'] == '7'):
                    g7 = g7 + 1;
        
columna = ['G0', 'G1','G2', 'G3','G4', 'G5','G6', 'G7'] 
valores = [g0,g1,g2,g3,g4,g5,g6,g7 ]
indice =['GSepsisBin']
  
grupo = { 'G0': [g0], 'G1': [g1], 'G2': [g2], 'G3': [g3], 'G4': [g4], 'G5': [g5], 'G6': [g6], 'G7': [g7] }
dfgruposPacientes = pd.DataFrame(data=grupo, index= indice)
PSepsisBinPaciente.to_csv('PSepsisBinPaciente.csv')

PSepsisBinPaciente

dfgruposPacientes

"""|IDpaciente| SeLabel | SeSisrs | SeSofa | \
|    P1    |    0    |    0    |    0   |  = 0  Sin Sepsis\
|   P2     |    0    |    0    |    1   |  = 1  SOFA\
|   P3     |    0    |    1    |    0   |  = 2  SIRS\
|   P4     |    0    |    1    |    1   |  = 3  SOFA y SIRS\
|   P5     |    1    |    0    |    0   |  = 4  SEPSISLABEL\
|   P6     |    1    |    0    |    1   |  = 5  SEPSISLABEL y SOFA\
|   P7     |    1    |    1    |    0   |  = 6  SEPSISLABEL Y SIRS\
|   P8     |    1    |    1    |    1   |  = 7  SEPSISLABEL SOFA Y SIRS

# Selección del Dataset  test StratifiedShuffleSplit
"""

PSepsisBinPaciente.head()

# assign dependent and indepenedent variables
X = PSepsisBinPaciente[['Paciente', 'SepsisLabel', 'Sepsis_SIRS', 'Sepsis_SOFA', 'GSepsisBin']].values
y = PSepsisBinPaciente['GSepsisBin'].values

# use StratifiedShuffleSplit()
sss = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=197)
sss.get_n_splits(X, y)

for train_index, test_index in sss.split(X, y):
   print("TRAIN:", train_index, "TEST:", test_index)
   X_train, X_test = X[train_index], X[test_index]
   y_train, y_test = y[train_index], y[test_index]
   df_train = pd.DataFrame(X_train, columns = ['Paciente', 'SepsisLabel', 'Sepsis_SIRS', 'Sepsis_SOFA', 'GSepsisBin']) 
   df_train.to_csv(str("sample_data/trainset.csv"), index=False)

   df_test = pd.DataFrame(X_test, columns = ['Paciente', 'SepsisLabel', 'Sepsis_SIRS', 'Sepsis_SOFA', 'GSepsisBin'])
   df_test.to_csv(str("sample_data/testset.csv"), index=False)

"""# Continuación actividad

Tenemos diferentes datos en el momento

- El dataset completo generado por el CDA (Pacientes con todas la horas)
- Dataset reducido a pacientes hospitalizados con 120 a 220 horas de hospitalización
- Dataset generado con la el puntaje binario 120 a 220 (Modificado donde se verifico si desarrollo sepsis en el tiempo de hospotalización de 120 a 220 horas)
- Dataset generado con el Stratified Shuffle Split
- Dataset generado con Stratified KFold
"""



"""# Graficas de trainset"""

csv_path = '/content/testset.csv'
testset = pd.read_csv(csv_path, sep=',')

csv_path = '/content/trainset.csv'
trainset = pd.read_csv(csv_path, sep=',')

trainset

SL=trainset['SepsisLabel'].value_counts()
SSi=trainset['Sepsis_SIRS'].value_counts()
SSo=trainset['Sepsis_SOFA'].value_counts()

plt.figure(figsize=(12,12))
plt.subplots_adjust( wspace=0.3, hspace=0.7)

plt.subplot(411)
print("SepsisLabel:\n",SL)
print()
Slabel = trainset.groupby(['SepsisLabel']).size()
Slabel.plot.bar()

plt.subplot(412)
print("SepsisSirs:\n", SSi)
print()
SSirs = trainset.groupby(['Sepsis_SIRS']).size()
SSirs.plot.bar()

plt.subplot(413)
print("SepsisSofa:\n", SSo)
print()
SSofa = trainset.groupby(['Sepsis_SOFA']).size()
SSofa.plot.bar()

plt.subplot(414)
dftrain= trainset.groupby(['SepsisLabel','Sepsis_SIRS', 'Sepsis_SOFA']).size()
dftrain.plot.bar()

"""# Validación de busqueda por horas Pacientes completos 120 a 220 horas



"""

GSepsis.rename({"Unnamed: 0":"a"}, axis="columns", inplace=True)
GSepsis.rename({"Unnamed: 0.1":"b"}, axis="columns", inplace=True)
GSepsis.drop(["a"], axis=1, inplace=True)
GSepsis.drop(["b"], axis=1, inplace=True)

def graficas_horas(nume):

  global dfgraficas120a220
  num = nume
  P120a220 = GSepsis.loc[GSepsis.Hora == num]
  dfgraficas120a220 = P120a220[['Paciente']].copy()

  dfgraficas120a220 = dfgraficas120a220.reset_index()
  P120a220 = P120a220.reset_index()

  for i in range(0,len(P120a220)):
    
    dfgraficas120a220.loc[i, 'SepsisLabel'] = 0;
    dfgraficas120a220.loc[i, 'Sepsis_SIRS'] = 0;
    dfgraficas120a220.loc[i, 'Sepsis_SOFA'] = 0;

    if (P120a220.loc[i, 'SepsisLabel'] == 1):
        dfgraficas120a220.loc[i, 'SepsisLabel'] = 1;

    if (P120a220.loc[i, 'Sepsis_SIRS'] == 1):
        dfgraficas120a220.loc[i, 'Sepsis_SIRS'] = 1;

    if (P120a220.loc[i, 'Sepsis_SOFA'] == 1):
        dfgraficas120a220.loc[i, 'Sepsis_SOFA'] = 1;

nume = int(input("Que hora de 120 a 220 desea graficar"))
graficas_horas(nume)

SL=dfgraficas120a220['SepsisLabel'].value_counts()
SSi=dfgraficas120a220['Sepsis_SIRS'].value_counts()
SSo=dfgraficas120a220['Sepsis_SOFA'].value_counts()

plt.figure(figsize=(10,10))
plt.subplots_adjust( wspace=0.3, hspace=0.7)

plt.subplot(411)
print("SepsisLabel:\n",SL)
print()
Slabel = dfgraficas120a220.groupby(['SepsisLabel']).size()
Slabel.plot.bar(color = 'orange')

plt.subplot(412)
print("Sepsis_SIRS:\n",SSi)
print()
SSirs = dfgraficas120a220.groupby(['Sepsis_SIRS']).size()
SSirs.plot.bar( color ='cyan')

plt.subplot(413)
print("Sepsis_SOFA:\n",SSo)
print()
SSofa = dfgraficas120a220.groupby(['Sepsis_SOFA']).size()
SSofa.plot.bar( color = 'olive')

plt.subplot(414)
dftrain= dfgraficas120a220.groupby(['SepsisLabel','Sepsis_SIRS', 'Sepsis_SOFA']).size()
dftrain.plot.bar()

"""# Validación por horas pacientes train"""

def graficas_train(nume):

  global dfgraficastrain
  num = nume
  P120a220 = GSepsis.loc[GSepsis.Hora == num]
  dfgraficastrain = testset[['Paciente']].copy()
  band = 0;
  P120a220 = P120a220.reset_index()

  for i in range(0,len(dfgraficastrain)):

    paciente = dfgraficastrain.loc[i, 'Paciente']
    band = 0;
    
    for j in range(0,len(P120a220)):
      
      if (P120a220.loc[j, 'Paciente'] == paciente):
        
        if (P120a220.loc[j, 'SepsisLabel'] == 1):
           dfgraficastrain.loc[i, 'SepsisLabel'] = 1;
        else:
           dfgraficastrain.loc[i, 'SepsisLabel'] = 0;
        
        if (P120a220.loc[j, 'Sepsis_SIRS'] == 1):
           dfgraficastrain.loc[i, 'Sepsis_SIRS'] = 1;
        else:
           dfgraficastrain.loc[i, 'Sepsis_SIRS'] = 0;
        
        if (P120a220.loc[j, 'Sepsis_SOFA'] == 1):
           dfgraficastrain.loc[i, 'Sepsis_SOFA'] = 1;
        else:
           dfgraficastrain.loc[i, 'Sepsis_SOFA'] = 0;
        
        band = 1;
    
      else:
           if (band == 0):
              dfgraficastrain.loc[i, 'SepsisLabel'] = -1;
              dfgraficastrain.loc[i, 'Sepsis_SIRS'] = -1;
              dfgraficastrain.loc[i, 'Sepsis_SOFA'] = -1;

nume = int(input("Que hora de 120 a 220 desea graficar"))
graficas_train(nume)

SL=dfgraficastrain['SepsisLabel'].value_counts()
SSi=dfgraficastrain['Sepsis_SIRS'].value_counts()
SSo=dfgraficastrain['Sepsis_SOFA'].value_counts()

plt.figure(figsize=(12,12))
plt.subplots_adjust( wspace=0.3, hspace=0.7)

plt.subplot(411)
print("SepsisLabel:\n",SL)
print()
Slabel = dfgraficastrain.groupby(['SepsisLabel']).size()
Slabel.plot.bar(color= 'orange')

plt.subplot(412)
print("Sepsis_SIRS:\n",SSi)
print()
SSirs = dfgraficastrain.groupby(['Sepsis_SIRS']).size()
SSirs.plot.bar(color = 'cyan')

plt.subplot(413)
print("Sepsis_SOFA:\n",SSo)
print()
SSofa = dfgraficastrain.groupby(['Sepsis_SOFA']).size()
SSofa.plot.bar(color = 'olive')

plt.subplot(414)
dftrain= dfgraficastrain.groupby(['SepsisLabel','Sepsis_SIRS', 'Sepsis_SOFA']).size()
dftrain.plot.bar()

"""# Comparativo graficas"""

nume = int(input("Que hora de 120 a 220 desea graficar"))
graficas_horas(nume)
graficas_train(nume)

plt.figure(figsize=(15,20))
plt.subplots_adjust( wspace=0.3, hspace=0.7)

plt.subplot(821)
Slabel = dfgraficastrain.groupby(['SepsisLabel']).size()
Slabel.plot.bar(color= 'orange')

plt.subplot(822)
Slabel2 = dfgraficas120a220.groupby(['SepsisLabel']).size()
Slabel2.plot.bar(color= 'orange')

plt.subplot(823)
SSirs = dfgraficastrain.groupby(['Sepsis_SIRS']).size()
SSirs.plot.bar(color = 'cyan')

plt.subplot(824)
SSirs2 = dfgraficas120a220.groupby(['Sepsis_SIRS']).size()
SSirs2.plot.bar(color = 'cyan')

plt.subplot(825)
SSofa = dfgraficastrain.groupby(['Sepsis_SOFA']).size()
SSofa.plot.bar(color = 'olive')

plt.subplot(826)
SSofa2 = dfgraficas120a220.groupby(['Sepsis_SOFA']).size()
SSofa2.plot.bar(color = 'olive')

plt.subplot(827)
dftrain= dfgraficastrain.groupby(['SepsisLabel','Sepsis_SIRS', 'Sepsis_SOFA']).size()
dftrain.plot.bar()

plt.subplot(828)
dftrain2= dfgraficas120a220.groupby(['SepsisLabel','Sepsis_SIRS', 'Sepsis_SOFA']).size()
dftrain2.plot.bar()

SL=dfgraficastrain['SepsisLabel'].value_counts()
SSi=dfgraficastrain['Sepsis_SIRS'].value_counts()
SSo=dfgraficastrain['Sepsis_SOFA'].value_counts()

SL2=dfgraficas120a220['SepsisLabel'].value_counts()
SSi2=dfgraficas120a220['Sepsis_SIRS'].value_counts()
SSo2=dfgraficas120a220['Sepsis_SOFA'].value_counts()
print("----------------------------------------------------|")
print("Resultados Pacientes completos de 120 a 220 horas")
print("----------------------------------------------------|")
print("SepsisLabel:\n",SL)
print("----------------------------------------------------|")
print("Sepsis_SIRS:\n",SSi)
print("----------------------------------------------------|")
print("Sepsis_SOFA:\n",SSo)
print("----------------------------------------------------|")

print()
print()

print("----------------------------------------------------|")
print("Resultado pacientes de entrenamiento")
print("----------------------------------------------------|")
print("SepsisLabel:\n",SL2)
print("----------------------------------------------------|")
print("Sepsis_SIRS:\n",SSi2)
print("----------------------------------------------------|")
print("Sepsis_SOFA:\n",SSo2)
print("----------------------------------------------------|")

"""# Stratified KFold Entrenamiento y validación"""

csv_path = '/content/testset.csv'
testset = pd.read_csv(csv_path, sep=',')

csv_path = '/content/trainset.csv'
trainset = pd.read_csv(csv_path, sep=',')

trainset.astype({'SepsisLabel': 'int64', 'Sepsis_SIRS': 'int64', 'Sepsis_SOFA': 'int64' }).dtypes

import numpy as np
from sklearn.model_selection import StratifiedKFold

X = trainset[['Paciente', 'SepsisLabel', 'Sepsis_SIRS', 'Sepsis_SOFA', 'GSepsisBin']].values
y = trainset['GSepsisBin'].values
skf = StratifiedKFold(n_splits=4)
skf.get_n_splits(X, y)

StratifiedKFold(n_splits=4, random_state=None, shuffle=False)

for train_index, test_index in skf.split(X, y):
  print("TRAIN:", train_index, "TEST:", test_index)
  X_train, X_test = X[train_index], X[test_index]
  y_train, y_test = y[train_index], y[test_index]
  
  df_trainSKF = pd.DataFrame(X_train, columns = ['Paciente', 'SepsisLabel', 'Sepsis_SIRS', 'Sepsis_SOFA', 'GSepsisBin']) 
  df_trainSKF.to_csv(str("sample_data/trainsetSKF.csv"), index=False)
  
  df_testSKF = pd.DataFrame(X_test, columns = ['Paciente', 'SepsisLabel', 'Sepsis_SIRS', 'Sepsis_SOFA', 'GSepsisBin'])
  df_testSKF.to_csv(str("sample_data/testsetSKF.csv"), index=False)



import numpy as np
from sklearn import linear_model
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from sklearn.model_selection import StratifiedKFold

X = trainset[['Paciente', 'SepsisLabel', 'Sepsis_SIRS', 'Sepsis_SOFA', 'GSepsisBin']].values
y = trainset['GSepsisBin'].values
skf = StratifiedKFold(n_splits=4)
skf.get_n_splits(X, y)

StratifiedKFold(n_splits=4, random_state=None, shuffle=False)
regr = linear_model.LinearRegression()

for train_index, test_index in skf.split(X, y):
  print("TRAIN:", train_index, "TEST:", test_index)
  X_train, X_test = X[train_index], X[test_index]
  y_train, y_test = y[train_index], y[test_index]

  X_train = X_train.values.reshape([X_train.values.shape[0],1])
  X_test = X_test.values.reshape([X_test.values.shape[0],1])
  regr.fit(X_train, y_train)
  y_pred=regr.predict(X_test)
  print(y_pred)
  print("Error: ", mean_squared_error(y_test,y_pred))
  print("El valor de r2: ", r2_score(y_test,y_pred))

"""#Regresión Logistica"""

# Se carga la data seleccionada para el estudio
csv_path = '/content/trainsetSKF.csv'
trainskf = pd.read_csv(csv_path, sep=',')

trainskf

# Se escogen la variables en X que se van a verificar para el analisis, y en y para el atributo que queremos identificar
X = (trainskf[["SepsisLabel","Sepsis_SIRS","Sepsis_SOFA"]])
y = (trainskf["GSepsisBin"])

#Entrenamiento
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.25, random_state=0)

# Predictoras de entrenamiento
X_train

# Se utiliza regresión logistica
model = LogisticRegression(max_iter=20000)

# Se acciona el modelo
model.fit(X_train,y_train)

# Se predice
y_pred = model.predict(X_train)
y_pred

# Score de predicción
model.score(X_test, y_test)

#Matriz de Confusión
cm= confusion_matrix(y_train, y_pred)
cm

#Matriz de Confusión

cmPd = pd.DataFrame(cm)
sn.set(font_scale=1.4) 
sn.heatmap(cmPd, annot=True, annot_kws={"size" : 20}, fmt='g', center=0, linewidths=1, cbar=False)
plt.show()